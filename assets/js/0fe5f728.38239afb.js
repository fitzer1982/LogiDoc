"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[2952],{541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"actions-sdk/core-concepts/rate-limits","title":"Rate Limits","description":"Understanding and managing rate limits is crucial for building reliable plugins that work well with external APIs and don\'t overwhelm system resources.","source":"@site/docs/actions-sdk/core-concepts/rate-limits.md","sourceDirName":"actions-sdk/core-concepts","slug":"/actions-sdk/core-concepts/rate-limits","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/rate-limits","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"actionsSdkSidebar","previous":{"title":"Webhooks","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/webhooks"},"next":{"title":"API Reference","permalink":"/LogiDoc/docs/actions-sdk/api-reference"}}');var i=t(4848),s=t(8453);const a={},l="Rate Limits",c={},d=[{value:"Overview",id:"overview",level:2},{value:"SDK Rate Limits",id:"sdk-rate-limits",level:2},{value:"Plugin Service Limits",id:"plugin-service-limits",level:3},{value:"Device Interaction Limits",id:"device-interaction-limits",level:3},{value:"Implementing Rate Limiting",id:"implementing-rate-limiting",level:2},{value:"Basic Rate Limiter",id:"basic-rate-limiter",level:3},{value:"Using Rate Limiter in Commands",id:"using-rate-limiter-in-commands",level:3},{value:"API Rate Limiting",id:"api-rate-limiting",level:2},{value:"HTTP Client with Rate Limiting",id:"http-client-with-rate-limiting",level:3},{value:"Exponential Backoff",id:"exponential-backoff",level:3},{value:"Monitoring Rate Limits",id:"monitoring-rate-limits",level:2},{value:"Rate Limit Metrics",id:"rate-limit-metrics",level:3},{value:"Logging Rate Limit Events",id:"logging-rate-limit-events",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\u2705 Do",id:"-do",level:3},{value:"\u274c Don&#39;t",id:"-dont",level:3},{value:"Caching Strategies",id:"caching-strategies",level:2},{value:"Simple Memory Cache",id:"simple-memory-cache",level:3},{value:"API Response Caching",id:"api-response-caching",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Rate Limit Exceptions",id:"rate-limit-exceptions",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Testing Rate Limits",id:"testing-rate-limits",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rate-limits",children:"Rate Limits"})}),"\n",(0,i.jsx)(n.p,{children:"Understanding and managing rate limits is crucial for building reliable plugins that work well with external APIs and don't overwhelm system resources."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Rate limits prevent plugins from making too many requests in a short time period, protecting both your plugin and external services from overload."}),"\n",(0,i.jsx)(n.h2,{id:"sdk-rate-limits",children:"SDK Rate Limits"}),"\n",(0,i.jsx)(n.h3,{id:"plugin-service-limits",children:"Plugin Service Limits"}),"\n",(0,i.jsx)(n.p,{children:"The Logi Plugin Service enforces these limits:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Limit"}),(0,i.jsx)(n.th,{children:"Window"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Command Executions"}),(0,i.jsx)(n.td,{children:"100/minute"}),(0,i.jsx)(n.td,{children:"Per plugin"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Image Updates"}),(0,i.jsx)(n.td,{children:"50/minute"}),(0,i.jsx)(n.td,{children:"Per plugin"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Setting Changes"}),(0,i.jsx)(n.td,{children:"20/minute"}),(0,i.jsx)(n.td,{children:"Per plugin"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Log Messages"}),(0,i.jsx)(n.td,{children:"200/minute"}),(0,i.jsx)(n.td,{children:"Per plugin"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"device-interaction-limits",children:"Device Interaction Limits"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Device Type"}),(0,i.jsx)(n.th,{children:"Touch Updates"}),(0,i.jsx)(n.th,{children:"LED Updates"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MX Creative Console"}),(0,i.jsx)(n.td,{children:"30/second"}),(0,i.jsx)(n.td,{children:"60/second"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Loupedeck CT"}),(0,i.jsx)(n.td,{children:"20/second"}),(0,i.jsx)(n.td,{children:"40/second"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Loupedeck Live"}),(0,i.jsx)(n.td,{children:"25/second"}),(0,i.jsx)(n.td,{children:"50/second"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"implementing-rate-limiting",children:"Implementing Rate Limiting"}),"\n",(0,i.jsx)(n.h3,{id:"basic-rate-limiter",children:"Basic Rate Limiter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class RateLimiter\r\n{\r\n    private readonly Dictionary<string, Queue<DateTime>> _requests = new();\r\n    private readonly int _maxRequests;\r\n    private readonly TimeSpan _timeWindow;\r\n\r\n    public RateLimiter(int maxRequests, TimeSpan timeWindow)\r\n    {\r\n        _maxRequests = maxRequests;\r\n        _timeWindow = timeWindow;\r\n    }\r\n\r\n    public bool IsAllowed(string key)\r\n    {\r\n        var now = DateTime.UtcNow;\r\n        \r\n        if (!_requests.ContainsKey(key))\r\n        {\r\n            _requests[key] = new Queue<DateTime>();\r\n        }\r\n\r\n        var requests = _requests[key];\r\n        \r\n        // Remove old requests outside the time window\r\n        while (requests.Count > 0 && now - requests.Peek() > _timeWindow)\r\n        {\r\n            requests.Dequeue();\r\n        }\r\n\r\n        if (requests.Count >= _maxRequests)\r\n        {\r\n            return false; // Rate limit exceeded\r\n        }\r\n\r\n        requests.Enqueue(now);\r\n        return true;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-rate-limiter-in-commands",children:"Using Rate Limiter in Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class RateLimitedCommand : PluginDynamicCommand\r\n{\r\n    private readonly RateLimiter _rateLimiter = new(10, TimeSpan.FromMinutes(1));\r\n\r\n    public RateLimitedCommand() : base("Rate Limited", "Demonstrates rate limiting", "Demo")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        if (!_rateLimiter.IsAllowed("command_execution"))\r\n        {\r\n            this.Plugin.Log.Warning("Rate limit exceeded for command execution");\r\n            ShowRateLimitMessage();\r\n            return;\r\n        }\r\n\r\n        // Execute command logic\r\n        ExecuteCommand();\r\n    }\r\n\r\n    private void ShowRateLimitMessage()\r\n    {\r\n        // Update button to show rate limit status\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"api-rate-limiting",children:"API Rate Limiting"}),"\n",(0,i.jsx)(n.h3,{id:"http-client-with-rate-limiting",children:"HTTP Client with Rate Limiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class RateLimitedHttpClient\r\n{\r\n    private readonly HttpClient _httpClient;\r\n    private readonly RateLimiter _rateLimiter;\r\n\r\n    public RateLimitedHttpClient(int requestsPerMinute)\r\n    {\r\n        _httpClient = new HttpClient();\r\n        _rateLimiter = new RateLimiter(requestsPerMinute, TimeSpan.FromMinutes(1));\r\n    }\r\n\r\n    public async Task<HttpResponseMessage> GetAsync(string url)\r\n    {\r\n        if (!_rateLimiter.IsAllowed("http_request"))\r\n        {\r\n            throw new RateLimitExceededException("HTTP rate limit exceeded");\r\n        }\r\n\r\n        return await _httpClient.GetAsync(url);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"exponential-backoff",children:"Exponential Backoff"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class BackoffHttpClient\r\n{\r\n    private readonly HttpClient _httpClient = new();\r\n    private readonly int _maxRetries = 3;\r\n\r\n    public async Task<HttpResponseMessage> GetWithBackoffAsync(string url)\r\n    {\r\n        for (int attempt = 0; attempt < _maxRetries; attempt++)\r\n        {\r\n            try\r\n            {\r\n                var response = await _httpClient.GetAsync(url);\r\n                \r\n                if (response.StatusCode == HttpStatusCode.TooManyRequests)\r\n                {\r\n                    var retryAfter = GetRetryAfterDelay(response);\r\n                    await Task.Delay(retryAfter);\r\n                    continue;\r\n                }\r\n\r\n                return response;\r\n            }\r\n            catch (HttpRequestException) when (attempt < _maxRetries - 1)\r\n            {\r\n                var delay = TimeSpan.FromSeconds(Math.Pow(2, attempt));\r\n                await Task.Delay(delay);\r\n            }\r\n        }\r\n\r\n        throw new MaxRetriesExceededException("Max retries exceeded");\r\n    }\r\n\r\n    private TimeSpan GetRetryAfterDelay(HttpResponseMessage response)\r\n    {\r\n        if (response.Headers.RetryAfter?.Delta.HasValue == true)\r\n        {\r\n            return response.Headers.RetryAfter.Delta.Value;\r\n        }\r\n\r\n        return TimeSpan.FromSeconds(60); // Default 1 minute\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-rate-limits",children:"Monitoring Rate Limits"}),"\n",(0,i.jsx)(n.h3,{id:"rate-limit-metrics",children:"Rate Limit Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class RateLimitMetrics\r\n{\r\n    private int _totalRequests;\r\n    private int _rateLimitedRequests;\r\n    private DateTime _lastReset = DateTime.UtcNow;\r\n\r\n    public void RecordRequest(bool wasRateLimited)\r\n    {\r\n        Interlocked.Increment(ref _totalRequests);\r\n        \r\n        if (wasRateLimited)\r\n        {\r\n            Interlocked.Increment(ref _rateLimitedRequests);\r\n        }\r\n    }\r\n\r\n    public RateLimitStats GetStats()\r\n    {\r\n        return new RateLimitStats\r\n        {\r\n            TotalRequests = _totalRequests,\r\n            RateLimitedRequests = _rateLimitedRequests,\r\n            RateLimitPercentage = _totalRequests > 0 ? \r\n                (double)_rateLimitedRequests / _totalRequests * 100 : 0,\r\n            SinceReset = DateTime.UtcNow - _lastReset\r\n        };\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"logging-rate-limit-events",children:"Logging Rate Limit Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class RateLimitLogger\r\n{\r\n    private readonly ILogger _logger;\r\n\r\n    public void LogRateLimit(string operation, string details = null)\r\n    {\r\n        _logger.Warning("Rate limit exceeded for {Operation}. {Details}", \r\n            operation, details ?? "");\r\n    }\r\n\r\n    public void LogRateLimitRecovery(string operation)\r\n    {\r\n        _logger.Information("Rate limit recovered for {Operation}", operation);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"-do",children:"\u2705 Do"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement client-side rate limiting"})," before making API calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use exponential backoff"})," for retries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache responses"})," to reduce API calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch operations"})," when possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor rate limit metrics"})," to optimize performance"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-dont",children:"\u274c Don't"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore rate limit headers"})," from APIs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry immediately"})," after rate limit errors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Make unnecessary API calls"})," in tight loops"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overwhelm the Plugin Service"})," with rapid updates"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"caching-strategies",children:"Caching Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"simple-memory-cache",children:"Simple Memory Cache"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class SimpleCache<T>\r\n{\r\n    private readonly Dictionary<string, CacheItem<T>> _cache = new();\r\n    private readonly TimeSpan _expiry;\r\n\r\n    public SimpleCache(TimeSpan expiry)\r\n    {\r\n        _expiry = expiry;\r\n    }\r\n\r\n    public bool TryGet(string key, out T value)\r\n    {\r\n        if (_cache.TryGetValue(key, out var item) && \r\n            DateTime.UtcNow - item.Timestamp < _expiry)\r\n        {\r\n            value = item.Value;\r\n            return true;\r\n        }\r\n\r\n        value = default;\r\n        return false;\r\n    }\r\n\r\n    public void Set(string key, T value)\r\n    {\r\n        _cache[key] = new CacheItem<T>\r\n        {\r\n            Value = value,\r\n            Timestamp = DateTime.UtcNow\r\n        };\r\n    }\r\n}\r\n\r\npublic class CacheItem<T>\r\n{\r\n    public T Value { get; set; }\r\n    public DateTime Timestamp { get; set; }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"api-response-caching",children:"API Response Caching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CachedApiClient\r\n{\r\n    private readonly HttpClient _httpClient = new();\r\n    private readonly SimpleCache<string> _cache = new(TimeSpan.FromMinutes(5));\r\n\r\n    public async Task<string> GetCachedAsync(string url)\r\n    {\r\n        if (_cache.TryGet(url, out var cachedResponse))\r\n        {\r\n            return cachedResponse;\r\n        }\r\n\r\n        var response = await _httpClient.GetStringAsync(url);\r\n        _cache.Set(url, response);\r\n        \r\n        return response;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"rate-limit-exceptions",children:"Rate Limit Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class RateLimitExceededException : Exception\r\n{\r\n    public TimeSpan RetryAfter { get; }\r\n\r\n    public RateLimitExceededException(string message, TimeSpan retryAfter = default) \r\n        : base(message)\r\n    {\r\n        RetryAfter = retryAfter;\r\n    }\r\n}\r\n\r\npublic class MaxRetriesExceededException : Exception\r\n{\r\n    public MaxRetriesExceededException(string message) : base(message)\r\n    {\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ResilientCommand : PluginDynamicCommand\r\n{\r\n    private readonly RateLimitedHttpClient _httpClient;\r\n    private string _lastKnownValue = "No data";\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        try\r\n        {\r\n            var data = await _httpClient.GetAsync("https://api.example.com/data");\r\n            _lastKnownValue = await data.Content.ReadAsStringAsync();\r\n        }\r\n        catch (RateLimitExceededException)\r\n        {\r\n            // Use cached/last known value\r\n            this.Plugin.Log.Information("Using cached value due to rate limit");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Failed to fetch data");\r\n        }\r\n\r\n        // Always update display with available data\r\n        UpdateDisplay(_lastKnownValue);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-rate-limits",children:"Testing Rate Limits"}),"\n",(0,i.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\r\npublic void RateLimiter_ExceedsLimit_ReturnsFalse()\r\n{\r\n    var rateLimiter = new RateLimiter(2, TimeSpan.FromMinutes(1));\r\n    \r\n    Assert.IsTrue(rateLimiter.IsAllowed("test"));\r\n    Assert.IsTrue(rateLimiter.IsAllowed("test"));\r\n    Assert.IsFalse(rateLimiter.IsAllowed("test")); // Should be rate limited\r\n}\r\n\r\n[Test]\r\npublic async Task RateLimiter_AfterTimeWindow_AllowsRequests()\r\n{\r\n    var rateLimiter = new RateLimiter(1, TimeSpan.FromMilliseconds(100));\r\n    \r\n    Assert.IsTrue(rateLimiter.IsAllowed("test"));\r\n    Assert.IsFalse(rateLimiter.IsAllowed("test"));\r\n    \r\n    await Task.Delay(150); // Wait for time window to pass\r\n    \r\n    Assert.IsTrue(rateLimiter.IsAllowed("test"));\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learn about core objects"}),": ",(0,i.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/core-concepts/objects",children:"Objects"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement webhooks"}),": ",(0,i.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/core-concepts/webhooks",children:"Webhooks"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"See practical examples"}),": ",(0,i.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/guides/payment-intents",children:"Guides & Tutorials"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Proper rate limiting ensures your plugin is reliable and respectful of system resources."})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);