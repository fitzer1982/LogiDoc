"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[5529],{313:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"actions-sdk/guides/payment-intents","title":"Building Plugin Commands","description":"Learn how to create effective plugin commands that respond to user interactions and integrate with external services.","source":"@site/docs/actions-sdk/guides/payment-intents.md","sourceDirName":"actions-sdk/guides","slug":"/actions-sdk/guides/payment-intents","permalink":"/LogiDoc/docs/actions-sdk/guides/payment-intents","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"actionsSdkSidebar","previous":{"title":"API Reference","permalink":"/LogiDoc/docs/actions-sdk/api-reference"},"next":{"title":"Building Adjustments","permalink":"/LogiDoc/docs/actions-sdk/guides/save-cards"}}');var i=e(4848),a=e(8453);const o={},s="Building Plugin Commands",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Command Structure",id:"basic-command-structure",level:2},{value:"Simple Command",id:"simple-command",level:3},{value:"Command with Visual Feedback",id:"command-with-visual-feedback",level:3},{value:"Advanced Command Patterns",id:"advanced-command-patterns",level:2},{value:"Async Command Execution",id:"async-command-execution",level:3},{value:"Parameterized Commands",id:"parameterized-commands",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"API Integration",id:"api-integration",level:3},{value:"File System Integration",id:"file-system-integration",level:3},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"Robust Error Handling",id:"robust-error-handling",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Caching Results",id:"caching-results",level:3},{value:"Testing Commands",id:"testing-commands",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"building-plugin-commands",children:"Building Plugin Commands"})}),"\n",(0,i.jsx)(r.p,{children:"Learn how to create effective plugin commands that respond to user interactions and integrate with external services."}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(r.p,{children:"Plugin commands are the primary way users interact with your plugin. This guide covers best practices for creating responsive, reliable commands."}),"\n",(0,i.jsx)(r.h2,{id:"basic-command-structure",children:"Basic Command Structure"}),"\n",(0,i.jsx)(r.h3,{id:"simple-command",children:"Simple Command"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class BasicCommand : PluginDynamicCommand\r\n{\r\n    public BasicCommand() : base(\r\n        displayName: "My Action",\r\n        description: "What this action does",\r\n        groupName: "My Plugin")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        // Your command logic here\r\n        ExecuteAction();\r\n    }\r\n\r\n    private void ExecuteAction()\r\n    {\r\n        // Implementation\r\n        Console.WriteLine("Action executed!");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"command-with-visual-feedback",children:"Command with Visual Feedback"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class StatusCommand : PluginDynamicCommand\r\n{\r\n    private bool _isActive = false;\r\n\r\n    public StatusCommand() : base("Toggle Status", "Toggle active status", "Demo")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        _isActive = !_isActive;\r\n        \r\n        // Update button appearance\r\n        this.ActionImageChanged(actionParameter);\r\n        \r\n        // Log the change\r\n        this.Plugin.Log.Info($"Status changed to: {_isActive}");\r\n    }\r\n\r\n    protected override string GetCommandDisplayName(string actionParameter, PluginImageSize imageSize)\r\n    {\r\n        return _isActive ? "Active" : "Inactive";\r\n    }\r\n\r\n    protected override BitmapImage GetCommandImage(string actionParameter, PluginImageSize imageSize)\r\n    {\r\n        using var builder = new BitmapBuilder(imageSize);\r\n        \r\n        var color = _isActive ? Color.Green : Color.Red;\r\n        builder.Clear(Color.Black);\r\n        builder.DrawEllipse(10, 10, 60, 60, color);\r\n        \r\n        return builder.ToImage();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"advanced-command-patterns",children:"Advanced Command Patterns"}),"\n",(0,i.jsx)(r.h3,{id:"async-command-execution",children:"Async Command Execution"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class AsyncCommand : PluginDynamicCommand\r\n{\r\n    private readonly HttpClient _httpClient = new();\r\n\r\n    public AsyncCommand() : base("Fetch Data", "Get data from API", "Network")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        // Don\'t block the UI thread\r\n        _ = Task.Run(async () => await ExecuteAsync(actionParameter));\r\n    }\r\n\r\n    private async Task ExecuteAsync(string actionParameter)\r\n    {\r\n        try\r\n        {\r\n            var response = await _httpClient.GetStringAsync("https://api.example.com/data");\r\n            \r\n            // Update UI on main thread\r\n            await Task.Run(() => UpdateDisplay(response));\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Failed to fetch data");\r\n            ShowError("Network error");\r\n        }\r\n    }\r\n\r\n    private void UpdateDisplay(string data)\r\n    {\r\n        // Update button or device display\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private void ShowError(string message)\r\n    {\r\n        // Show error state\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"parameterized-commands",children:"Parameterized Commands"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class MultiOptionCommand : PluginDynamicCommand\r\n{\r\n    public MultiOptionCommand() : base()\r\n    {\r\n        // Add multiple parameter options\r\n        this.AddParameter("option1", "First Option", "Options");\r\n        this.AddParameter("option2", "Second Option", "Options");\r\n        this.AddParameter("option3", "Third Option", "Options");\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        switch (actionParameter)\r\n        {\r\n            case "option1":\r\n                ExecuteOption1();\r\n                break;\r\n            case "option2":\r\n                ExecuteOption2();\r\n                break;\r\n            case "option3":\r\n                ExecuteOption3();\r\n                break;\r\n            default:\r\n                this.Plugin.Log.Warning($"Unknown parameter: {actionParameter}");\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected override string GetCommandDisplayName(string actionParameter, PluginImageSize imageSize)\r\n    {\r\n        return actionParameter switch\r\n        {\r\n            "option1" => "Option 1",\r\n            "option2" => "Option 2", \r\n            "option3" => "Option 3",\r\n            _ => "Unknown"\r\n        };\r\n    }\r\n\r\n    private void ExecuteOption1() { /* Implementation */ }\r\n    private void ExecuteOption2() { /* Implementation */ }\r\n    private void ExecuteOption3() { /* Implementation */ }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,i.jsx)(r.h3,{id:"api-integration",children:"API Integration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class ApiIntegrationCommand : PluginDynamicCommand\r\n{\r\n    private readonly HttpClient _httpClient;\r\n    private readonly string _apiKey;\r\n\r\n    public ApiIntegrationCommand() : base("API Action", "Trigger API call", "Integration")\r\n    {\r\n        _httpClient = new HttpClient();\r\n        _apiKey = Environment.GetEnvironmentVariable("API_KEY");\r\n        \r\n        if (string.IsNullOrEmpty(_apiKey))\r\n        {\r\n            this.Plugin.OnPluginStatusChanged(\r\n                PluginStatus.Error,\r\n                "API key not configured",\r\n                "https://docs.example.com/setup"\r\n            );\r\n        }\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        if (string.IsNullOrEmpty(_apiKey))\r\n        {\r\n            ShowConfigurationError();\r\n            return;\r\n        }\r\n\r\n        _ = Task.Run(async () => await CallApiAsync());\r\n    }\r\n\r\n    private async Task CallApiAsync()\r\n    {\r\n        try\r\n        {\r\n            _httpClient.DefaultRequestHeaders.Clear();\r\n            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");\r\n\r\n            var payload = new\r\n            {\r\n                action = "trigger",\r\n                timestamp = DateTime.UtcNow\r\n            };\r\n\r\n            var json = JsonSerializer.Serialize(payload);\r\n            var content = new StringContent(json, Encoding.UTF8, "application/json");\r\n\r\n            var response = await _httpClient.PostAsync("https://api.example.com/trigger", content);\r\n            \r\n            if (response.IsSuccessStatusCode)\r\n            {\r\n                ShowSuccess();\r\n            }\r\n            else\r\n            {\r\n                ShowError($"API error: {response.StatusCode}");\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "API call failed");\r\n            ShowError("Network error");\r\n        }\r\n    }\r\n\r\n    private void ShowSuccess()\r\n    {\r\n        // Update button to show success state\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private void ShowError(string message)\r\n    {\r\n        // Update button to show error state\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private void ShowConfigurationError()\r\n    {\r\n        // Show configuration needed state\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"file-system-integration",children:"File System Integration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class FileCommand : PluginDynamicCommand\r\n{\r\n    public FileCommand() : base("Process File", "Process selected file", "Files")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        var openFileDialog = new OpenFileDialog\r\n        {\r\n            Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*",\r\n            Title = "Select file to process"\r\n        };\r\n\r\n        if (openFileDialog.ShowDialog() == DialogResult.OK)\r\n        {\r\n            _ = Task.Run(() => ProcessFile(openFileDialog.FileName));\r\n        }\r\n    }\r\n\r\n    private void ProcessFile(string filePath)\r\n    {\r\n        try\r\n        {\r\n            var content = File.ReadAllText(filePath);\r\n            var wordCount = content.Split(\' \', StringSplitOptions.RemoveEmptyEntries).Length;\r\n            \r\n            this.Plugin.Log.Info($"Processed file: {Path.GetFileName(filePath)}, Words: {wordCount}");\r\n            \r\n            // Update display with result\r\n            UpdateDisplayWithResult(wordCount);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, $"Failed to process file: {filePath}");\r\n            ShowError();\r\n        }\r\n    }\r\n\r\n    private void UpdateDisplayWithResult(int wordCount)\r\n    {\r\n        // Store result for display\r\n        this.Plugin.SetPluginSetting("last_word_count", wordCount.ToString(), false);\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    protected override string GetCommandDisplayName(string actionParameter, PluginImageSize imageSize)\r\n    {\r\n        if (this.Plugin.TryGetPluginSetting("last_word_count", out var countStr) &&\r\n            int.TryParse(countStr, out var count))\r\n        {\r\n            return $"Words: {count}";\r\n        }\r\n        \r\n        return "Process File";\r\n    }\r\n\r\n    private void ShowError()\r\n    {\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"robust-error-handling",children:"Robust Error Handling"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class RobustCommand : PluginDynamicCommand\r\n{\r\n    public RobustCommand() : base("Robust Action", "Action with error handling", "Demo")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        try\r\n        {\r\n            ExecuteMainLogic();\r\n        }\r\n        catch (ArgumentException ex)\r\n        {\r\n            this.Plugin.Log.Warning(ex, "Invalid argument provided");\r\n            ShowUserError("Invalid input");\r\n        }\r\n        catch (UnauthorizedAccessException ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Access denied");\r\n            ShowUserError("Permission denied");\r\n        }\r\n        catch (HttpRequestException ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Network request failed");\r\n            ShowUserError("Network error");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Unexpected error in command execution");\r\n            ShowUserError("Unexpected error");\r\n        }\r\n    }\r\n\r\n    private void ExecuteMainLogic()\r\n    {\r\n        // Main command logic that might throw exceptions\r\n        throw new NotImplementedException("Demo exception");\r\n    }\r\n\r\n    private void ShowUserError(string message)\r\n    {\r\n        // Update button to show error state\r\n        // Could also show a notification or update device display\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class RetryCommand : PluginDynamicCommand\r\n{\r\n    private const int MaxRetries = 3;\r\n    private readonly TimeSpan RetryDelay = TimeSpan.FromSeconds(1);\r\n\r\n    public RetryCommand() : base("Retry Action", "Action with retry logic", "Demo")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        _ = Task.Run(async () => await ExecuteWithRetry());\r\n    }\r\n\r\n    private async Task ExecuteWithRetry()\r\n    {\r\n        for (int attempt = 1; attempt <= MaxRetries; attempt++)\r\n        {\r\n            try\r\n            {\r\n                await ExecuteOperation();\r\n                ShowSuccess();\r\n                return; // Success, exit retry loop\r\n            }\r\n            catch (Exception ex) when (attempt < MaxRetries)\r\n            {\r\n                this.Plugin.Log.Warning(ex, $"Attempt {attempt} failed, retrying...");\r\n                await Task.Delay(RetryDelay);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                this.Plugin.Log.Error(ex, $"All {MaxRetries} attempts failed");\r\n                ShowError();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async Task ExecuteOperation()\r\n    {\r\n        // Simulate operation that might fail\r\n        await Task.Delay(100);\r\n        \r\n        if (Random.Shared.NextDouble() < 0.7) // 70% chance of failure for demo\r\n        {\r\n            throw new InvalidOperationException("Simulated failure");\r\n        }\r\n    }\r\n\r\n    private void ShowSuccess()\r\n    {\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private void ShowError()\r\n    {\r\n        this.ActionImageChanged();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(r.h3,{id:"caching-results",children:"Caching Results"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class CachedCommand : PluginDynamicCommand\r\n{\r\n    private readonly Dictionary<string, CacheItem> _cache = new();\r\n    private readonly TimeSpan _cacheExpiry = TimeSpan.FromMinutes(5);\r\n\r\n    public CachedCommand() : base("Cached Action", "Action with caching", "Performance")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        _ = Task.Run(async () => await ExecuteWithCache(actionParameter));\r\n    }\r\n\r\n    private async Task ExecuteWithCache(string key)\r\n    {\r\n        // Check cache first\r\n        if (_cache.TryGetValue(key, out var cached) && \r\n            DateTime.UtcNow - cached.Timestamp < _cacheExpiry)\r\n        {\r\n            DisplayResult(cached.Data);\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            // Fetch fresh data\r\n            var data = await FetchData(key);\r\n            \r\n            // Update cache\r\n            _cache[key] = new CacheItem\r\n            {\r\n                Data = data,\r\n                Timestamp = DateTime.UtcNow\r\n            };\r\n\r\n            DisplayResult(data);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Failed to fetch data");\r\n            \r\n            // Use stale cache if available\r\n            if (_cache.TryGetValue(key, out var stale))\r\n            {\r\n                this.Plugin.Log.Info("Using stale cached data");\r\n                DisplayResult(stale.Data);\r\n            }\r\n            else\r\n            {\r\n                ShowError();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async Task<string> FetchData(string key)\r\n    {\r\n        // Simulate API call\r\n        await Task.Delay(1000);\r\n        return $"Data for {key} at {DateTime.Now:HH:mm:ss}";\r\n    }\r\n\r\n    private void DisplayResult(string data)\r\n    {\r\n        this.Plugin.Log.Info($"Displaying: {data}");\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private void ShowError()\r\n    {\r\n        this.ActionImageChanged();\r\n    }\r\n\r\n    private class CacheItem\r\n    {\r\n        public string Data { get; set; }\r\n        public DateTime Timestamp { get; set; }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"testing-commands",children:"Testing Commands"}),"\n",(0,i.jsx)(r.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'[TestClass]\r\npublic class CommandTests\r\n{\r\n    [TestMethod]\r\n    public void BasicCommand_Execute_CompletesSuccessfully()\r\n    {\r\n        // Arrange\r\n        var command = new BasicCommand();\r\n        var executed = false;\r\n        \r\n        // Act\r\n        command.RunCommand("");\r\n        \r\n        // Assert\r\n        Assert.IsTrue(executed);\r\n    }\r\n\r\n    [TestMethod]\r\n    public async Task AsyncCommand_Execute_HandlesErrors()\r\n    {\r\n        // Arrange\r\n        var command = new AsyncCommand();\r\n        \r\n        // Act & Assert\r\n        Assert.DoesNotThrow(() => command.RunCommand(""));\r\n        \r\n        // Wait for async completion\r\n        await Task.Delay(100);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Learn about adjustments"}),": ",(0,i.jsx)(r.a,{href:"/LogiDoc/docs/actions-sdk/guides/save-cards",children:"Save Cards"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Implement webhooks"}),": ",(0,i.jsx)(r.a,{href:"/LogiDoc/docs/actions-sdk/guides/webhooks-guide",children:"Webhooks Guide"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Explore samples"}),": ",(0,i.jsx)(r.a,{href:"/LogiDoc/docs/actions-sdk/samples",children:"Sample Projects"})]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Building effective commands is key to creating engaging plugin experiences."})})]})}function m(n={}){const{wrapper:r}={...(0,a.R)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>o,x:()=>s});var t=e(6540);const i={},a=t.createContext(i);function o(n){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function s(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:r},n.children)}}}]);