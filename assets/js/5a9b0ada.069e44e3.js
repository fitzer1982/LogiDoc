"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[7304],{36:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"actions-sdk/api-reference","title":"API Reference","description":"Complete reference documentation for the Logi Actions SDK classes, methods, and interfaces.","source":"@site/docs/actions-sdk/api-reference.md","sourceDirName":"actions-sdk","slug":"/actions-sdk/api-reference","permalink":"/LogiDoc/docs/actions-sdk/api-reference","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"actionsSdkSidebar","previous":{"title":"Rate Limits","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/rate-limits"},"next":{"title":"Building Plugin Commands","permalink":"/LogiDoc/docs/actions-sdk/guides/payment-intents"}}');var t=i(4848),s=i(8453);const a={},l="API Reference",o={},d=[{value:"Core Classes",id:"core-classes",level:2},{value:"Plugin",id:"plugin",level:3},{value:"Methods",id:"methods",level:4},{value:"Load()",id:"load",level:5},{value:"Unload()",id:"unload",level:5},{value:"TryGetPluginSetting(string, out string)",id:"trygetpluginsettingstring-out-string",level:5},{value:"SetPluginSetting(string, string, bool)",id:"setpluginsettingstring-string-bool",level:5},{value:"PluginDynamicCommand",id:"plugindynamiccommand",level:3},{value:"Methods",id:"methods-1",level:4},{value:"RunCommand(string)",id:"runcommandstring",level:5},{value:"GetCommandDisplayName(string, PluginImageSize)",id:"getcommanddisplaynamestring-pluginimagesize",level:5},{value:"GetCommandImage(string, PluginImageSize)",id:"getcommandimagestring-pluginimagesize",level:5},{value:"AddParameter(string, string, string)",id:"addparameterstring-string-string",level:5},{value:"PluginDynamicAdjustment",id:"plugindynamicadjustment",level:3},{value:"Methods",id:"methods-2",level:4},{value:"ApplyAdjustment(string, int)",id:"applyadjustmentstring-int",level:5},{value:"RunCommand(string)",id:"runcommandstring-1",level:5},{value:"GetAdjustmentValue(string)",id:"getadjustmentvaluestring",level:5},{value:"ClientApplication",id:"clientapplication",level:3},{value:"Enumerations",id:"enumerations",level:2},{value:"PluginStatus",id:"pluginstatus",level:3},{value:"PluginImageSize",id:"pluginimagesize",level:3},{value:"VirtualKeyCode",id:"virtualkeycode",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"ILogger",id:"ilogger",level:3},{value:"Utility Classes",id:"utility-classes",level:2},{value:"BitmapBuilder",id:"bitmapbuilder",level:3},{value:"PluginResources",id:"pluginresources",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Exceptions",id:"common-exceptions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\u2705 Do",id:"-do",level:3},{value:"\u274c Don&#39;t",id:"-dont",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Complete Command Example",id:"complete-command-example",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From SDK v1.x to v2.x",id:"from-sdk-v1x-to-v2x",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,t.jsx)(n.p,{children:"Complete reference documentation for the Logi Actions SDK classes, methods, and interfaces."}),"\n",(0,t.jsx)(n.admonition,{title:"Auto-Generated Documentation",type:"info",children:(0,t.jsx)(n.p,{children:"This API reference is automatically generated from source code. For the most up-to-date information, refer to the inline documentation in your IDE."})}),"\n",(0,t.jsx)(n.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,t.jsx)(n.h3,{id:"plugin",children:"Plugin"}),"\n",(0,t.jsx)(n.p,{children:"The base class for all Logi Actions plugins."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public abstract class Plugin\r\n{\r\n    public PluginInfo Info { get; }\r\n    public Assembly Assembly { get; }\r\n    public ILogger Log { get; }\r\n    \r\n    public abstract void Load();\r\n    public abstract void Unload();\r\n    \r\n    // Settings management\r\n    protected bool TryGetPluginSetting(string settingName, out string settingValue);\r\n    protected void SetPluginSetting(string settingName, string settingValue, bool backupOnline);\r\n    protected void DeletePluginSetting(string settingName);\r\n    protected string[] ListPluginSettings();\r\n    \r\n    // Status management\r\n    public void OnPluginStatusChanged(PluginStatus status, string message, string supportUrl);\r\n    \r\n    // Data directory\r\n    public string GetPluginDataDirectory();\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h5,{id:"load",children:"Load()"}),"\n",(0,t.jsx)(n.p,{children:"Called when the plugin is loaded. Override to initialize your plugin."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public override void Load()\r\n{\r\n    this.Info.DisplayName = "My Plugin";\r\n    this.Info.Description = "Plugin description";\r\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"unload",children:"Unload()"}),"\n",(0,t.jsx)(n.p,{children:"Called when the plugin is unloaded. Override to clean up resources."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public override void Unload()\r\n{\r\n    // Dispose resources\r\n    _httpClient?.Dispose();\r\n}\n"})}),"\n",(0,t.jsx)(n.h5,{id:"trygetpluginsettingstring-out-string",children:"TryGetPluginSetting(string, out string)"}),"\n",(0,t.jsx)(n.p,{children:"Retrieves a plugin setting value."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"settingName"})," (string): The setting name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"settingValue"})," (out string): The setting value if found"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"bool"})," - True if setting exists, false otherwise"]}),"\n",(0,t.jsx)(n.h5,{id:"setpluginsettingstring-string-bool",children:"SetPluginSetting(string, string, bool)"}),"\n",(0,t.jsx)(n.p,{children:"Stores a plugin setting."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"settingName"})," (string): The setting name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"settingValue"})," (string): The setting value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"backupOnline"})," (bool): Whether to backup to cloud"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"plugindynamiccommand",children:"PluginDynamicCommand"}),"\n",(0,t.jsx)(n.p,{children:"Base class for creating interactive commands."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public abstract class PluginDynamicCommand\r\n{\r\n    protected PluginDynamicCommand(string displayName, string description, string groupName);\r\n    protected PluginDynamicCommand(); // For parameterized commands\r\n    \r\n    // Core methods\r\n    protected abstract void RunCommand(string actionParameter);\r\n    \r\n    // Display customization\r\n    protected virtual string GetCommandDisplayName(string actionParameter, PluginImageSize imageSize);\r\n    protected virtual BitmapImage GetCommandImage(string actionParameter, PluginImageSize imageSize);\r\n    \r\n    // Parameter management\r\n    protected void AddParameter(string actionParameter, string displayName, string groupName);\r\n    \r\n    // State notifications\r\n    protected void ActionImageChanged(string actionParameter = null);\r\n    \r\n    // Properties\r\n    public Plugin Plugin { get; }\r\n    public string DisplayName { get; }\r\n    public string Description { get; }\r\n    public string GroupName { get; }\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,t.jsx)(n.h5,{id:"runcommandstring",children:"RunCommand(string)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Abstract method"})," - Executed when the command is triggered."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"actionParameter"})," (string): Parameter identifying the specific action instance"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'protected override void RunCommand(string actionParameter)\r\n{\r\n    // Your command logic here\r\n    Console.WriteLine($"Command executed with parameter: {actionParameter}");\r\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"getcommanddisplaynamestring-pluginimagesize",children:"GetCommandDisplayName(string, PluginImageSize)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Virtual method"})," - Returns the display name for the command."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"actionParameter"})," (string): The action parameter"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"imageSize"})," (PluginImageSize): The target image size"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - The display name"]}),"\n",(0,t.jsx)(n.h5,{id:"getcommandimagestring-pluginimagesize",children:"GetCommandImage(string, PluginImageSize)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Virtual method"})," - Returns a custom image for the command."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"actionParameter"})," (string): The action parameter"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"imageSize"})," (PluginImageSize): The target image size"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"BitmapImage"})," - The command image"]}),"\n",(0,t.jsx)(n.h5,{id:"addparameterstring-string-string",children:"AddParameter(string, string, string)"}),"\n",(0,t.jsx)(n.p,{children:"Adds a parameter option for the command."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"actionParameter"})," (string): The parameter value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"displayName"})," (string): Display name for the parameter"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"groupName"})," (string): Group name for organization"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"plugindynamicadjustment",children:"PluginDynamicAdjustment"}),"\n",(0,t.jsx)(n.p,{children:"Base class for creating encoder adjustments."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public abstract class PluginDynamicAdjustment\r\n{\r\n    protected PluginDynamicAdjustment(string displayName, string description, string groupName, bool hasReset = false);\r\n    \r\n    // Core methods\r\n    protected abstract void ApplyAdjustment(string actionParameter, int diff);\r\n    protected virtual void RunCommand(string actionParameter); // For encoder press\r\n    \r\n    // Value display\r\n    protected virtual string GetAdjustmentValue(string actionParameter);\r\n    protected virtual string GetAdjustmentDisplayName(string actionParameter, PluginImageSize imageSize);\r\n    protected virtual BitmapImage GetAdjustmentImage(string actionParameter, PluginImageSize imageSize);\r\n    \r\n    // State notifications\r\n    protected void AdjustmentValueChanged(string actionParameter = null);\r\n    \r\n    // Properties\r\n    public bool HasReset { get; }\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"methods-2",children:"Methods"}),"\n",(0,t.jsx)(n.h5,{id:"applyadjustmentstring-int",children:"ApplyAdjustment(string, int)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Abstract method"})," - Called when encoder is rotated."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"actionParameter"})," (string): The action parameter"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"diff"})," (int): Rotation amount (positive = clockwise, negative = counter-clockwise)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"protected override void ApplyAdjustment(string actionParameter, int diff)\r\n{\r\n    var currentValue = GetCurrentValue();\r\n    var newValue = Math.Max(0, Math.Min(100, currentValue + diff));\r\n    SetValue(newValue);\r\n    \r\n    this.AdjustmentValueChanged(actionParameter);\r\n}\n"})}),"\n",(0,t.jsx)(n.h5,{id:"runcommandstring-1",children:"RunCommand(string)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Virtual method"})," - Called when encoder is pressed (if HasReset = true)."]}),"\n",(0,t.jsx)(n.h5,{id:"getadjustmentvaluestring",children:"GetAdjustmentValue(string)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Virtual method"})," - Returns the current value to display near the encoder."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - The value to display"]}),"\n",(0,t.jsx)(n.h3,{id:"clientapplication",children:"ClientApplication"}),"\n",(0,t.jsx)(n.p,{children:"Base class for application-specific plugins."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public abstract class ClientApplication\r\n{\r\n    // Application identification\r\n    protected virtual string GetProcessName();\r\n    protected virtual string[] GetProcessNames();\r\n    protected virtual string GetBundleId(); // macOS\r\n    protected virtual bool IsProcessNameSupported(string processName);\r\n    \r\n    // Application events\r\n    public event EventHandler ApplicationStarted;\r\n    public event EventHandler ApplicationStopped;\r\n    \r\n    // Utility methods\r\n    public void SendKeyboardShortcut(VirtualKeyCode keyCode);\r\n    public void SendKeyboardShortcut(VirtualKeyCode[] keyCodes);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"enumerations",children:"Enumerations"}),"\n",(0,t.jsx)(n.h3,{id:"pluginstatus",children:"PluginStatus"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public enum PluginStatus\r\n{\r\n    Normal,\r\n    Warning,\r\n    Error\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pluginimagesize",children:"PluginImageSize"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public enum PluginImageSize\r\n{\r\n    Width60 = 60,\r\n    Width80 = 80,\r\n    Width90 = 90\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"virtualkeycode",children:"VirtualKeyCode"}),"\n",(0,t.jsx)(n.p,{children:"Common virtual key codes for keyboard shortcuts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public enum VirtualKeyCode\r\n{\r\n    // Media keys\r\n    VolumeUp,\r\n    VolumeDown,\r\n    VolumeMute,\r\n    MediaPlayPause,\r\n    MediaNextTrack,\r\n    MediaPreviousTrack,\r\n    \r\n    // Function keys\r\n    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,\r\n    \r\n    // Modifier keys\r\n    Control,\r\n    Alt,\r\n    Shift,\r\n    Windows,\r\n    \r\n    // Common keys\r\n    Enter,\r\n    Escape,\r\n    Space,\r\n    Tab,\r\n    Backspace,\r\n    Delete\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,t.jsx)(n.h3,{id:"ilogger",children:"ILogger"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface ILogger\r\n{\r\n    void Verbose(string message);\r\n    void Info(string message);\r\n    void Warning(string message);\r\n    void Error(string message);\r\n    void Error(Exception exception, string message);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"utility-classes",children:"Utility Classes"}),"\n",(0,t.jsx)(n.h3,{id:"bitmapbuilder",children:"BitmapBuilder"}),"\n",(0,t.jsx)(n.p,{children:"Helper class for creating custom button images."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class BitmapBuilder : IDisposable\r\n{\r\n    public BitmapBuilder(PluginImageSize imageSize);\r\n    \r\n    // Background\r\n    public void Clear(Color color);\r\n    public void SetBackgroundImage(BitmapImage image);\r\n    \r\n    // Drawing\r\n    public void DrawText(string text, Color? color = null, int? fontSize = null);\r\n    public void DrawText(string text, int x, int y, int width, int height, Color? color = null, int? fontSize = null);\r\n    public void DrawImage(BitmapImage image, int x, int y, int width, int height);\r\n    public void DrawRectangle(int x, int y, int width, int height, Color color);\r\n    public void DrawEllipse(int x, int y, int width, int height, Color color);\r\n    \r\n    // Output\r\n    public BitmapImage ToImage();\r\n    \r\n    public void Dispose();\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pluginresources",children:"PluginResources"}),"\n",(0,t.jsx)(n.p,{children:"Helper class for accessing embedded resources."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public static class PluginResources\r\n{\r\n    public static void Init(Assembly assembly);\r\n    public static string FindFile(string fileName);\r\n    public static BitmapImage ReadImage(string resourceName);\r\n    public static string ReadTextFile(string resourceName);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"common-exceptions",children:"Common Exceptions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Plugin loading errors\r\npublic class PluginLoadException : Exception;\r\n\r\n// Resource access errors  \r\npublic class ResourceNotFoundException : Exception;\r\n\r\n// Device communication errors\r\npublic class DeviceException : Exception;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"-do",children:"\u2705 Do"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always call base constructors with appropriate parameters"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"ActionImageChanged()"})," to notify of visual updates"]}),"\n",(0,t.jsxs)(n.li,{children:["Implement proper error handling in ",(0,t.jsx)(n.code,{children:"RunCommand()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Dispose resources in ",(0,t.jsx)(n.code,{children:"Unload()"})]}),"\n",(0,t.jsx)(n.li,{children:"Use meaningful display names and descriptions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-dont",children:"\u274c Don't"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Block the UI thread in command methods"}),"\n",(0,t.jsx)(n.li,{children:"Ignore exceptions without logging"}),"\n",(0,t.jsx)(n.li,{children:"Create commands without proper grouping"}),"\n",(0,t.jsx)(n.li,{children:"Forget to call state change notifications"}),"\n",(0,t.jsx)(n.li,{children:"Hardcode file paths or settings"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,t.jsx)(n.h3,{id:"complete-command-example",children:"Complete Command Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class VolumeCommand : PluginDynamicCommand\r\n{\r\n    public VolumeCommand() : base(\r\n        displayName: "System Volume",\r\n        description: "Adjust system volume",\r\n        groupName: "Audio")\r\n    {\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        try\r\n        {\r\n            // Toggle mute\r\n            this.Plugin.ClientApplication.SendKeyboardShortcut(VirtualKeyCode.VolumeMute);\r\n            \r\n            // Update button appearance\r\n            this.ActionImageChanged(actionParameter);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Failed to toggle volume");\r\n        }\r\n    }\r\n\r\n    protected override BitmapImage GetCommandImage(string actionParameter, PluginImageSize imageSize)\r\n    {\r\n        using var builder = new BitmapBuilder(imageSize);\r\n        \r\n        var isMuted = IsSystemMuted();\r\n        var iconPath = isMuted ? "VolumeOff.png" : "VolumeOn.png";\r\n        \r\n        var iconImage = PluginResources.ReadImage(iconPath);\r\n        builder.SetBackgroundImage(iconImage);\r\n        \r\n        return builder.ToImage();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsx)(n.h3,{id:"from-sdk-v1x-to-v2x",children:"From SDK v1.x to v2.x"}),"\n",(0,t.jsx)(n.p,{children:"Key changes in SDK v2.x:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Constructor Changes"}),": All commands now require explicit display names"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"New Image Sizes"}),": Support for additional image sizes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced Logging"}),": Structured logging with log levels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async Support"}),": Better support for async operations"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// v1.x\r\npublic MyCommand() : base("My Command") { }\r\n\r\n// v2.x  \r\npublic MyCommand() : base("My Command", "Description", "Group") { }\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["This API reference covers the core SDK functionality. For advanced features and examples, see the ",(0,t.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/guides/payment-intents",children:"Guides & Tutorials"}),"."]})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);