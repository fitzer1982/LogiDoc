"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[9588],{1790:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"lightsync-sdk/udk/getting-started","title":"Getting Started with UDK/C++","description":"Learn how to integrate LightSync SDK with Unreal Engine and C++ applications","source":"@site/docs/lightsync-sdk/udk/getting-started.md","sourceDirName":"lightsync-sdk/udk","slug":"/lightsync-sdk/udk/getting-started","permalink":"/LogiDoc/docs/lightsync-sdk/udk/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started with UDK/C++","sidebar_label":"UDK/C++ Getting Started","description":"Learn how to integrate LightSync SDK with Unreal Engine and C++ applications"}}');var t=r(4848),l=r(8453);const o={id:"getting-started",title:"Getting Started with UDK/C++",sidebar_label:"UDK/C++ Getting Started",description:"Learn how to integrate LightSync SDK with Unreal Engine and C++ applications"},s="Getting Started with UDK/C++",c={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Step 1: Download the SDK",id:"step-1-download-the-sdk",level:3},{value:"Step 2: Include Headers",id:"step-2-include-headers",level:3},{value:"Step 3: Link the Library",id:"step-3-link-the-library",level:3},{value:"Step 4: Initialize the SDK",id:"step-4-initialize-the-sdk",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Setting LED Colors",id:"setting-led-colors",level:3},{value:"Creating Breathing Effects",id:"creating-breathing-effects",level:3},{value:"Zone Control",id:"zone-control",level:3},{value:"Unreal Engine Integration",id:"unreal-engine-integration",level:2},{value:"Step 1: Create Plugin",id:"step-1-create-plugin",level:3},{value:"Step 2: Implement Plugin",id:"step-2-implement-plugin",level:3},{value:"Step 3: Create Blueprint Function Library",id:"step-3-create-blueprint-function-library",level:3},{value:"Step 4: Implement Blueprint Functions",id:"step-4-implement-blueprint-functions",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Device Management",id:"device-management",level:3},{value:"Color Utilities",id:"color-utilities",level:3},{value:"Animation System",id:"animation-system",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Support",id:"support",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"getting-started-with-udkc",children:"Getting Started with UDK/C++"})}),"\n",(0,t.jsx)(e.p,{children:"This guide will walk you through setting up the LightSync SDK in your Unreal Engine or C++ application."}),"\n",(0,t.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Unreal Engine 4.27+ or Visual Studio 2019+"}),"\n",(0,t.jsx)(e.li,{children:"Windows 10/11"}),"\n",(0,t.jsx)(e.li,{children:"Logitech Gaming Software (LGS) or G HUB installed"}),"\n",(0,t.jsx)(e.li,{children:"Compatible Logitech gaming device"}),"\n",(0,t.jsx)(e.li,{children:"Basic C++ knowledge"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(e.h3,{id:"step-1-download-the-sdk",children:"Step 1: Download the SDK"}),"\n",(0,t.jsx)(e.p,{children:"Download the LightSync SDK DLL and header files from the Logitech developer portal."}),"\n",(0,t.jsx)(e.h3,{id:"step-2-include-headers",children:"Step 2: Include Headers"}),"\n",(0,t.jsx)(e.p,{children:"Add the SDK header to your project:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'#include "LogitechGSDK.h"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-3-link-the-library",children:"Step 3: Link the Library"}),"\n",(0,t.jsx)(e.p,{children:"Add the SDK library to your project:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"For Unreal Engine:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'// In your .Build.cs file\r\nPublicDependencyModuleNames.AddRange(new string[] { "LogitechGSDK" });\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"For Visual Studio:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Add ",(0,t.jsx)(e.code,{children:"LogitechGSDK.lib"})," to your linker input"]}),"\n",(0,t.jsxs)(e.li,{children:["Ensure ",(0,t.jsx)(e.code,{children:"LogitechGSDK.dll"})," is in your executable directory"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"step-4-initialize-the-sdk",children:"Step 4: Initialize the SDK"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'#include "LogitechGSDK.h"\r\n#include <iostream>\r\n\r\nint main()\r\n{\r\n    // Initialize the SDK\r\n    bool initialized = LogiLedInit();\r\n    \r\n    if (!initialized)\r\n    {\r\n        std::cout << "Failed to initialize LightSync SDK" << std::endl;\r\n        return -1;\r\n    }\r\n    \r\n    std::cout << "LightSync SDK initialized successfully" << std::endl;\r\n    \r\n    // Your lighting code here\r\n    \r\n    // Cleanup\r\n    LogiLedShutdown();\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(e.h3,{id:"setting-led-colors",children:"Setting LED Colors"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"// Set all LEDs to red\r\nLogiLedSetLighting(100, 0, 0);\r\n\r\n// Set specific key to blue\r\nLogiLedSetLightingForKeyWithKeyName(LOGI_LED_A, 0, 0, 255);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"creating-breathing-effects",children:"Creating Breathing Effects"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"// Create a breathing effect between red and blue\r\nLogiLedSetLightingForTargetZone2(\r\n    LOGI_DEVICETYPE_ALL,\r\n    0, // Zone index\r\n    255, 0, 0, // Red color\r\n    0, 0, 255, // Blue color\r\n    2000 // Duration in milliseconds\r\n);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"zone-control",children:"Zone Control"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"// Control specific zones on RGB devices\r\nLogiLedSetLightingForTargetZone(\r\n    LOGI_DEVICETYPE_RGB,\r\n    0, // Zone 0\r\n    255, 0, 0 // Red color\r\n);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"unreal-engine-integration",children:"Unreal Engine Integration"}),"\n",(0,t.jsx)(e.h3,{id:"step-1-create-plugin",children:"Step 1: Create Plugin"}),"\n",(0,t.jsx)(e.p,{children:"Create a new plugin for LightSync integration:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'// LogitechLightSyncPlugin.h\r\n#pragma once\r\n\r\n#include "CoreMinimal.h"\r\n#include "Modules/ModuleManager.h"\r\n\r\nclass FLogitechLightSyncPlugin : public IModuleInterface\r\n{\r\npublic:\r\n    virtual void StartupModule() override;\r\n    virtual void ShutdownModule() override;\r\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-2-implement-plugin",children:"Step 2: Implement Plugin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'// LogitechLightSyncPlugin.cpp\r\n#include "LogitechLightSyncPlugin.h"\r\n#include "LogitechGSDK.h"\r\n\r\n#define LOCTEXT_NAMESPACE "FLogitechLightSyncPlugin"\r\n\r\nvoid FLogitechLightSyncPlugin::StartupModule()\r\n{\r\n    // Initialize SDK when plugin loads\r\n    if (LogiLedInit())\r\n    {\r\n        UE_LOG(LogTemp, Log, TEXT("LightSync SDK initialized"));\r\n    }\r\n    else\r\n    {\r\n        UE_LOG(LogTemp, Warning, TEXT("Failed to initialize LightSync SDK"));\r\n    }\r\n}\r\n\r\nvoid FLogitechLightSyncPlugin::ShutdownModule()\r\n{\r\n    // Cleanup SDK\r\n    LogiLedShutdown();\r\n    UE_LOG(LogTemp, Log, TEXT("LightSync SDK shutdown"));\r\n}\r\n\r\n#undef LOCTEXT_NAMESPACE\r\n\r\nIMPLEMENT_MODULE(FLogitechLightSyncPlugin, LogitechLightSyncPlugin)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-3-create-blueprint-function-library",children:"Step 3: Create Blueprint Function Library"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'// LogitechLightSyncBPLibrary.h\r\n#pragma once\r\n\r\n#include "CoreMinimal.h"\r\n#include "Kismet/BlueprintFunctionLibrary.h"\r\n#include "LogitechGSDK.h"\r\n#include "LogitechLightSyncBPLibrary.generated.h"\r\n\r\nUCLASS()\r\nclass LOGITECHLIGHTSYNC_API ULogitechLightSyncBPLibrary : public UBlueprintFunctionLibrary\r\n{\r\n    GENERATED_BODY()\r\n\r\npublic:\r\n    UFUNCTION(BlueprintCallable, Category = "Logitech LightSync")\r\n    static bool SetAllLights(int32 Red, int32 Green, int32 Blue);\r\n    \r\n    UFUNCTION(BlueprintCallable, Category = "Logitech LightSync")\r\n    static bool SetKeyLight(int32 KeyCode, int32 Red, int32 Green, int32 Blue);\r\n    \r\n    UFUNCTION(BlueprintCallable, Category = "Logitech LightSync")\r\n    static bool CreateBreathingEffect(int32 Red1, int32 Green1, int32 Blue1,\r\n                                    int32 Red2, int32 Green2, int32 Blue2,\r\n                                    int32 Duration);\r\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-4-implement-blueprint-functions",children:"Step 4: Implement Blueprint Functions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'// LogitechLightSyncBPLibrary.cpp\r\n#include "LogitechLightSyncBPLibrary.h"\r\n\r\nbool ULogitechLightSyncBPLibrary::SetAllLights(int32 Red, int32 Green, int32 Blue)\r\n{\r\n    return LogiLedSetLighting(Red, Green, Blue);\r\n}\r\n\r\nbool ULogitechLightSyncBPLibrary::SetKeyLight(int32 KeyCode, int32 Red, int32 Green, int32 Blue)\r\n{\r\n    return LogiLedSetLightingForKeyWithKeyName(KeyCode, Red, Green, Blue);\r\n}\r\n\r\nbool ULogitechLightSyncBPLibrary::CreateBreathingEffect(int32 Red1, int32 Green1, int32 Blue1,\r\n                                                       int32 Red2, int32 Green2, int32 Blue2,\r\n                                                       int32 Duration)\r\n{\r\n    return LogiLedSetLightingForTargetZone2(LOGI_DEVICETYPE_ALL, 0,\r\n                                          Red1, Green1, Blue1,\r\n                                          Red2, Green2, Blue2,\r\n                                          Duration);\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(e.h3,{id:"device-management",children:"Device Management"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class LightSyncManager\r\n{\r\npublic:\r\n    static bool IsDeviceConnected()\r\n    {\r\n        // Try to set lighting to test if device is connected\r\n        return LogiLedSetLighting(0, 0, 0);\r\n    }\r\n    \r\n    static void TestAllKeys()\r\n    {\r\n        int keys[] = {LOGI_LED_W, LOGI_LED_A, LOGI_LED_S, LOGI_LED_D};\r\n        int colors[][3] = {{255,0,0}, {0,255,0}, {0,0,255}, {255,255,0}};\r\n        \r\n        for (int i = 0; i < 4; i++)\r\n        {\r\n            LogiLedSetLightingForKeyWithKeyName(keys[i], \r\n                                              colors[i][0], \r\n                                              colors[i][1], \r\n                                              colors[i][2]);\r\n            Sleep(500);\r\n        }\r\n    }\r\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"color-utilities",children:"Color Utilities"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"struct RGB\r\n{\r\n    int red, green, blue;\r\n    \r\n    RGB(int r, int g, int b) : red(r), green(g), blue(b) {}\r\n};\r\n\r\nclass ColorUtils\r\n{\r\npublic:\r\n    static RGB HSVToRGB(float hue, float saturation, float value)\r\n    {\r\n        int h = (int)(hue * 6);\r\n        float f = hue * 6 - h;\r\n        float p = value * (1 - saturation);\r\n        float q = value * (1 - f * saturation);\r\n        float t = value * (1 - (1 - f) * saturation);\r\n        \r\n        switch (h)\r\n        {\r\n            case 0: return RGB(value * 255, t * 255, p * 255);\r\n            case 1: return RGB(q * 255, value * 255, p * 255);\r\n            case 2: return RGB(p * 255, value * 255, t * 255);\r\n            case 3: return RGB(p * 255, q * 255, value * 255);\r\n            case 4: return RGB(t * 255, p * 255, value * 255);\r\n            case 5: return RGB(value * 255, p * 255, q * 255);\r\n            default: return RGB(0, 0, 0);\r\n        }\r\n    }\r\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"animation-system",children:"Animation System"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class LightAnimation\r\n{\r\nprivate:\r\n    bool running;\r\n    std::thread animationThread;\r\n    \r\npublic:\r\n    void StartRainbowEffect()\r\n    {\r\n        if (running) return;\r\n        \r\n        running = true;\r\n        animationThread = std::thread([this]()\r\n        {\r\n            float hue = 0.0f;\r\n            while (running)\r\n            {\r\n                RGB color = ColorUtils::HSVToRGB(hue, 1.0f, 1.0f);\r\n                LogiLedSetLighting(color.red, color.green, color.blue);\r\n                \r\n                hue += 0.01f;\r\n                if (hue > 1.0f) hue = 0.0f;\r\n                \r\n                std::this_thread::sleep_for(std::chrono::milliseconds(50));\r\n            }\r\n        });\r\n    }\r\n    \r\n    void Stop()\r\n    {\r\n        running = false;\r\n        if (animationThread.joinable())\r\n        {\r\n            animationThread.join();\r\n        }\r\n    }\r\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'class LightSyncManager\r\n{\r\npublic:\r\n    static bool SafeSetLighting(int red, int green, int blue)\r\n    {\r\n        try\r\n        {\r\n            return LogiLedSetLighting(red, green, blue);\r\n        }\r\n        catch (const std::exception& e)\r\n        {\r\n            std::cerr << "Error setting lighting: " << e.what() << std::endl;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    static bool InitializeSDK()\r\n    {\r\n        try\r\n        {\r\n            return LogiLedInit();\r\n        }\r\n        catch (const std::exception& e)\r\n        {\r\n            std::cerr << "Failed to initialize SDK: " << e.what() << std::endl;\r\n            return false;\r\n        }\r\n    }\r\n};\n'})}),"\n",(0,t.jsx)(e.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'#include "LogitechGSDK.h"\r\n#include <iostream>\r\n#include <thread>\r\n#include <chrono>\r\n\r\nclass LightSyncDemo\r\n{\r\npublic:\r\n    static void Run()\r\n    {\r\n        std::cout << "Starting LightSync C++ Demo" << std::endl;\r\n        \r\n        // Initialize SDK\r\n        if (!LogiLedInit())\r\n        {\r\n            std::cout << "Failed to initialize SDK" << std::endl;\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // Basic lighting demo\r\n            DemoBasicLighting();\r\n            std::this_thread::sleep_for(std::chrono::seconds(2));\r\n            \r\n            // Key-specific lighting\r\n            DemoKeyLighting();\r\n            std::this_thread::sleep_for(std::chrono::seconds(2));\r\n            \r\n            // Breathing effect\r\n            DemoBreathingEffect();\r\n            std::this_thread::sleep_for(std::chrono::seconds(3));\r\n            \r\n            // Rainbow effect\r\n            DemoRainbowEffect();\r\n            std::this_thread::sleep_for(std::chrono::seconds(5));\r\n            \r\n        }\r\n        catch (const std::exception& e)\r\n        {\r\n            std::cerr << "Demo error: " << e.what() << std::endl;\r\n        }\r\n        \r\n        // Cleanup\r\n        LogiLedShutdown();\r\n        std::cout << "Demo complete" << std::endl;\r\n    }\r\n    \r\nprivate:\r\n    static void DemoBasicLighting()\r\n    {\r\n        std::cout << "Setting basic lighting..." << std::endl;\r\n        LogiLedSetLighting(0, 0, 255); // Blue\r\n    }\r\n    \r\n    static void DemoKeyLighting()\r\n    {\r\n        std::cout << "Setting key-specific lighting..." << std::endl;\r\n        int keys[] = {LOGI_LED_W, LOGI_LED_A, LOGI_LED_S, LOGI_LED_D};\r\n        int colors[][3] = {{255,0,0}, {0,255,0}, {0,0,255}, {255,255,0}};\r\n        \r\n        for (int i = 0; i < 4; i++)\r\n        {\r\n            LogiLedSetLightingForKeyWithKeyName(keys[i], \r\n                                              colors[i][0], \r\n                                              colors[i][1], \r\n                                              colors[i][2]);\r\n        }\r\n    }\r\n    \r\n    static void DemoBreathingEffect()\r\n    {\r\n        std::cout << "Creating breathing effect..." << std::endl;\r\n        LogiLedSetLightingForTargetZone2(LOGI_DEVICETYPE_ALL, 0,\r\n                                       255, 0, 0, 0, 0, 255, 2000);\r\n    }\r\n    \r\n    static void DemoRainbowEffect()\r\n    {\r\n        std::cout << "Starting rainbow effect..." << std::endl;\r\n        LightAnimation animation;\r\n        animation.StartRainbowEffect();\r\n        \r\n        std::this_thread::sleep_for(std::chrono::seconds(5));\r\n        animation.Stop();\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    LightSyncDemo::Run();\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Always initialize and shutdown properly"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Use RAII for resource management"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Handle exceptions gracefully"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Check return values from SDK calls"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Use appropriate color values (0-255)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Implement proper threading for animations"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Use smart pointers for memory management"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Explore the ",(0,t.jsx)(e.a,{href:"/docs/lightsync-sdk/udk/api-reference",children:"API Reference"})]}),"\n",(0,t.jsxs)(e.li,{children:["Learn about ",(0,t.jsx)(e.a,{href:"/docs/lightsync-sdk/udk/advanced-effects",children:"Advanced Effects"})]}),"\n",(0,t.jsxs)(e.li,{children:["Check out ",(0,t.jsx)(e.a,{href:"/docs/lightsync-sdk/troubleshooting",children:"Troubleshooting"})]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(e.p,{children:"If you encounter issues:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Ensure LGS/G HUB is running"}),"\n",(0,t.jsx)(e.li,{children:"Check device compatibility"}),"\n",(0,t.jsx)(e.li,{children:"Verify DLL is in the correct location"}),"\n",(0,t.jsx)(e.li,{children:"Review error codes in the API reference"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>s});var i=r(6540);const t={},l=i.createContext(t);function o(n){const e=i.useContext(l);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);