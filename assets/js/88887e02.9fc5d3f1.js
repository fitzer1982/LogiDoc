"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[2545],{2148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"actions-sdk/guides/save-cards","title":"Building Adjustments","description":"Learn how to create encoder adjustments that respond to rotation and provide continuous value control.","source":"@site/docs/actions-sdk/guides/save-cards.md","sourceDirName":"actions-sdk/guides","slug":"/actions-sdk/guides/save-cards","permalink":"/LogiDoc/docs/actions-sdk/guides/save-cards","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"actionsSdkSidebar","previous":{"title":"Building Plugin Commands","permalink":"/LogiDoc/docs/actions-sdk/guides/payment-intents"},"next":{"title":"Webhooks Integration Guide","permalink":"/LogiDoc/docs/actions-sdk/guides/webhooks-guide"}}');var s=t(4848),a=t(8453);const o={},i="Building Adjustments",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Basic Adjustment",id:"basic-adjustment",level:2},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Multi-Parameter Adjustment",id:"multi-parameter-adjustment",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"building-adjustments",children:"Building Adjustments"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how to create encoder adjustments that respond to rotation and provide continuous value control."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Adjustments handle encoder rotations and provide smooth, continuous control over values like volume, brightness, or any numeric parameter."}),"\n",(0,s.jsx)(n.h2,{id:"basic-adjustment",children:"Basic Adjustment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class VolumeAdjustment : PluginDynamicAdjustment\r\n{\r\n    private int _volume = 50; // Default volume\r\n\r\n    public VolumeAdjustment() : base(\r\n        displayName: "System Volume",\r\n        description: "Adjust system volume",\r\n        groupName: "Audio",\r\n        hasReset: true)\r\n    {\r\n    }\r\n\r\n    protected override void ApplyAdjustment(string actionParameter, int diff)\r\n    {\r\n        // Update volume with bounds checking\r\n        _volume = Math.Max(0, Math.Min(100, _volume + diff));\r\n        \r\n        // Apply to system\r\n        SetSystemVolume(_volume);\r\n        \r\n        // Notify service of value change\r\n        this.AdjustmentValueChanged(actionParameter);\r\n    }\r\n\r\n    protected override void RunCommand(string actionParameter)\r\n    {\r\n        // Reset to default when encoder is pressed\r\n        _volume = 50;\r\n        SetSystemVolume(_volume);\r\n        this.AdjustmentValueChanged(actionParameter);\r\n    }\r\n\r\n    protected override string GetAdjustmentValue(string actionParameter)\r\n    {\r\n        return $"{_volume}%";\r\n    }\r\n\r\n    private void SetSystemVolume(int volume)\r\n    {\r\n        // Implementation to set system volume\r\n        this.Plugin.Log.Info($"Volume set to {volume}%");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"multi-parameter-adjustment",children:"Multi-Parameter Adjustment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ColorAdjustment : PluginDynamicAdjustment\r\n{\r\n    private readonly Dictionary<string, int> _values = new()\r\n    {\r\n        ["red"] = 128,\r\n        ["green"] = 128,\r\n        ["blue"] = 128\r\n    };\r\n\r\n    public ColorAdjustment() : base()\r\n    {\r\n        this.AddParameter("red", "Red Channel", "Color");\r\n        this.AddParameter("green", "Green Channel", "Color");\r\n        this.AddParameter("blue", "Blue Channel", "Color");\r\n    }\r\n\r\n    protected override void ApplyAdjustment(string actionParameter, int diff)\r\n    {\r\n        if (_values.ContainsKey(actionParameter))\r\n        {\r\n            _values[actionParameter] = Math.Max(0, Math.Min(255, _values[actionParameter] + diff));\r\n            UpdateColor();\r\n            this.AdjustmentValueChanged(actionParameter);\r\n        }\r\n    }\r\n\r\n    protected override string GetAdjustmentValue(string actionParameter)\r\n    {\r\n        return _values.TryGetValue(actionParameter, out var value) ? value.ToString() : "0";\r\n    }\r\n\r\n    private void UpdateColor()\r\n    {\r\n        var color = Color.FromArgb(_values["red"], _values["green"], _values["blue"]);\r\n        // Apply color to device or application\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Learn webhooks"}),": ",(0,s.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/guides/webhooks-guide",children:"Webhooks Guide"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"See more examples"}),": ",(0,s.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/samples",children:"Sample Projects"})]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);