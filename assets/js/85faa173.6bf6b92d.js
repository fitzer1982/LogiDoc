"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[7693],{2883:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"actions-sdk/core-concepts/webhooks","title":"Webhooks","description":"Webhooks enable your plugin to receive real-time notifications from external services and respond to events automatically.","source":"@site/docs/actions-sdk/core-concepts/webhooks.md","sourceDirName":"actions-sdk/core-concepts","slug":"/actions-sdk/core-concepts/webhooks","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/webhooks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"actionsSdkSidebar","previous":{"title":"Core Objects","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/objects"},"next":{"title":"Rate Limits","permalink":"/LogiDoc/docs/actions-sdk/core-concepts/rate-limits"}}');var s=r(4848),i=r(8453);const a={},t="Webhooks",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Setting Up Webhooks",id:"setting-up-webhooks",level:2},{value:"Basic Webhook Handler",id:"basic-webhook-handler",level:3},{value:"Common Webhook Patterns",id:"common-webhook-patterns",level:2},{value:"GitHub Integration",id:"github-integration",level:3},{value:"Slack Integration",id:"slack-integration",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Signature Verification",id:"signature-verification",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Webhook Data Models",id:"webhook-data-models",level:2},{value:"Generic Webhook Model",id:"generic-webhook-model",level:3},{value:"Service-Specific Models",id:"service-specific-models",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Robust Error Processing",id:"robust-error-processing",level:3},{value:"Testing Webhooks",id:"testing-webhooks",level:2},{value:"Local Testing with ngrok",id:"local-testing-with-ngrok",level:3},{value:"Mock Webhook Testing",id:"mock-webhook-testing",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Async Processing",id:"async-processing",level:3},{value:"Webhook Queue",id:"webhook-queue",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Build Status Notifications",id:"build-status-notifications",level:3},{value:"Social Media Monitoring",id:"social-media-monitoring",level:3},{value:"Cleanup",id:"cleanup",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"webhooks",children:"Webhooks"})}),"\n",(0,s.jsx)(n.p,{children:"Webhooks enable your plugin to receive real-time notifications from external services and respond to events automatically."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Webhooks are HTTP callbacks that external services send to your plugin when specific events occur. This enables real-time integrations without constant polling."}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-webhooks",children:"Setting Up Webhooks"}),"\n",(0,s.jsx)(n.h3,{id:"basic-webhook-handler",children:"Basic Webhook Handler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class WebhookCommand : PluginDynamicCommand\r\n{\r\n    private readonly HttpListener _listener;\r\n    \r\n    public WebhookCommand() : base("Webhook Handler", "Receives webhooks", "Integration")\r\n    {\r\n        _listener = new HttpListener();\r\n        _listener.Prefixes.Add("http://localhost:8080/webhook/");\r\n        StartListening();\r\n    }\r\n\r\n    private async void StartListening()\r\n    {\r\n        _listener.Start();\r\n        \r\n        while (_listener.IsListening)\r\n        {\r\n            try\r\n            {\r\n                var context = await _listener.GetContextAsync();\r\n                await ProcessWebhook(context);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                this.Plugin.Log.Error(ex, "Webhook processing failed");\r\n            }\r\n        }\r\n    }\r\n\r\n    private async Task ProcessWebhook(HttpListenerContext context)\r\n    {\r\n        var request = context.Request;\r\n        var response = context.Response;\r\n\r\n        // Read webhook payload\r\n        using var reader = new StreamReader(request.InputStream);\r\n        var payload = await reader.ReadToEndAsync();\r\n\r\n        // Process the webhook\r\n        await HandleWebhookPayload(payload, request.Headers);\r\n\r\n        // Send response\r\n        response.StatusCode = 200;\r\n        response.Close();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-webhook-patterns",children:"Common Webhook Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"github-integration",children:"GitHub Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task HandleGitHubWebhook(string payload, NameValueCollection headers)\r\n{\r\n    var signature = headers["X-Hub-Signature-256"];\r\n    \r\n    // Verify webhook signature\r\n    if (!VerifyGitHubSignature(payload, signature))\r\n    {\r\n        return;\r\n    }\r\n\r\n    var webhookData = JsonSerializer.Deserialize<GitHubWebhook>(payload);\r\n    \r\n    switch (webhookData.Action)\r\n    {\r\n        case "push":\r\n            await HandlePushEvent(webhookData);\r\n            break;\r\n        case "pull_request":\r\n            await HandlePullRequestEvent(webhookData);\r\n            break;\r\n    }\r\n}\r\n\r\nprivate bool VerifyGitHubSignature(string payload, string signature)\r\n{\r\n    var secret = Environment.GetEnvironmentVariable("GITHUB_WEBHOOK_SECRET");\r\n    var computedSignature = ComputeHmacSha256(payload, secret);\r\n    return signature == $"sha256={computedSignature}";\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"slack-integration",children:"Slack Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task HandleSlackWebhook(string payload)\r\n{\r\n    var slackEvent = JsonSerializer.Deserialize<SlackEvent>(payload);\r\n    \r\n    if (slackEvent.Type == "url_verification")\r\n    {\r\n        // Respond to Slack\'s verification challenge\r\n        return slackEvent.Challenge;\r\n    }\r\n    \r\n    if (slackEvent.Event?.Type == "message")\r\n    {\r\n        await ProcessSlackMessage(slackEvent.Event);\r\n    }\r\n}\r\n\r\nprivate async Task ProcessSlackMessage(SlackMessage message)\r\n{\r\n    // Update device display with new message\r\n    this.ActionImageChanged();\r\n    \r\n    // Optionally trigger device notification\r\n    await TriggerDeviceNotification($"New message: {message.Text}");\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"signature-verification",children:"Signature Verification"}),"\n",(0,s.jsx)(n.p,{children:"Always verify webhook signatures to ensure authenticity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private bool VerifyWebhookSignature(string payload, string signature, string secret)\r\n{\r\n    using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\r\n    var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(payload));\r\n    var computedSignature = Convert.ToHexString(computedHash).ToLower();\r\n    \r\n    return signature.Equals($"sha256={computedSignature}", StringComparison.OrdinalIgnoreCase);\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,s.jsx)(n.p,{children:"Implement rate limiting to prevent abuse:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private readonly Dictionary<string, DateTime> _lastRequestTimes = new();\r\nprivate readonly TimeSpan _rateLimitWindow = TimeSpan.FromMinutes(1);\r\n\r\nprivate bool IsRateLimited(string clientId)\r\n{\r\n    if (_lastRequestTimes.TryGetValue(clientId, out var lastRequest))\r\n    {\r\n        return DateTime.UtcNow - lastRequest < _rateLimitWindow;\r\n    }\r\n    \r\n    _lastRequestTimes[clientId] = DateTime.UtcNow;\r\n    return false;\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"webhook-data-models",children:"Webhook Data Models"}),"\n",(0,s.jsx)(n.h3,{id:"generic-webhook-model",children:"Generic Webhook Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class WebhookPayload\r\n{\r\n    public string Event { get; set; }\r\n    public DateTime Timestamp { get; set; }\r\n    public Dictionary<string, object> Data { get; set; }\r\n    public string Source { get; set; }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-specific-models",children:"Service-Specific Models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class GitHubWebhook\r\n{\r\n    public string Action { get; set; }\r\n    public Repository Repository { get; set; }\r\n    public PushEvent Push { get; set; }\r\n}\r\n\r\npublic class SlackEvent\r\n{\r\n    public string Type { get; set; }\r\n    public string Challenge { get; set; }\r\n    public SlackMessage Event { get; set; }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"robust-error-processing",children:"Robust Error Processing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task ProcessWebhook(HttpListenerContext context)\r\n{\r\n    try\r\n    {\r\n        var payload = await ReadPayload(context.Request);\r\n        await HandleWebhookPayload(payload);\r\n        \r\n        context.Response.StatusCode = 200;\r\n    }\r\n    catch (JsonException ex)\r\n    {\r\n        this.Plugin.Log.Warning(ex, "Invalid JSON in webhook payload");\r\n        context.Response.StatusCode = 400;\r\n    }\r\n    catch (UnauthorizedAccessException ex)\r\n    {\r\n        this.Plugin.Log.Warning(ex, "Unauthorized webhook request");\r\n        context.Response.StatusCode = 401;\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        this.Plugin.Log.Error(ex, "Webhook processing error");\r\n        context.Response.StatusCode = 500;\r\n    }\r\n    finally\r\n    {\r\n        context.Response.Close();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-webhooks",children:"Testing Webhooks"}),"\n",(0,s.jsx)(n.h3,{id:"local-testing-with-ngrok",children:"Local Testing with ngrok"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install ngrok\r\nnpm install -g ngrok\r\n\r\n# Expose local webhook endpoint\r\nngrok http 8080\r\n\r\n# Use the generated URL in your webhook configuration\r\n# https://abc123.ngrok.io/webhook\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mock-webhook-testing",children:"Mock Webhook Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\r\npublic async Task TestWebhookProcessing()\r\n{\r\n    var mockPayload = new WebhookPayload\r\n    {\r\n        Event = "test_event",\r\n        Timestamp = DateTime.UtcNow,\r\n        Data = new Dictionary<string, object> { { "key", "value" } }\r\n    };\r\n    \r\n    var json = JsonSerializer.Serialize(mockPayload);\r\n    await ProcessWebhookPayload(json);\r\n    \r\n    // Assert expected behavior\r\n    Assert.IsTrue(EventWasProcessed);\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"async-processing",children:"Async Processing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task HandleWebhookPayload(string payload)\r\n{\r\n    // Process webhook asynchronously to avoid blocking\r\n    _ = Task.Run(async () =>\r\n    {\r\n        try\r\n        {\r\n            await ProcessPayloadAsync(payload);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            this.Plugin.Log.Error(ex, "Async webhook processing failed");\r\n        }\r\n    });\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"webhook-queue",children:"Webhook Queue"}),"\n",(0,s.jsx)(n.p,{children:"For high-volume webhooks, implement a queue:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private readonly ConcurrentQueue<string> _webhookQueue = new();\r\nprivate readonly SemaphoreSlim _processingLock = new(1, 1);\r\n\r\nprivate async Task QueueWebhook(string payload)\r\n{\r\n    _webhookQueue.Enqueue(payload);\r\n    \r\n    if (await _processingLock.WaitAsync(0))\r\n    {\r\n        _ = Task.Run(ProcessWebhookQueue);\r\n    }\r\n}\r\n\r\nprivate async Task ProcessWebhookQueue()\r\n{\r\n    try\r\n    {\r\n        while (_webhookQueue.TryDequeue(out var payload))\r\n        {\r\n            await ProcessPayloadAsync(payload);\r\n        }\r\n    }\r\n    finally\r\n    {\r\n        _processingLock.Release();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"build-status-notifications",children:"Build Status Notifications"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task HandleBuildWebhook(BuildWebhook webhook)\r\n{\r\n    var status = webhook.Status;\r\n    var color = status == "success" ? Color.Green : Color.Red;\r\n    \r\n    // Update device LED or display\r\n    await UpdateDeviceStatus(status, color);\r\n    \r\n    // Show notification\r\n    if (status == "failed")\r\n    {\r\n        await ShowNotification($"Build failed: {webhook.Project}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"social-media-monitoring",children:"Social Media Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'private async Task HandleSocialWebhook(SocialWebhook webhook)\r\n{\r\n    if (webhook.Mentions.Contains("@yourhandle"))\r\n    {\r\n        // Light up device when mentioned\r\n        await TriggerMentionAlert();\r\n        \r\n        // Update counter\r\n        IncrementMentionCount();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cleanup",children:"Cleanup"}),"\n",(0,s.jsx)(n.p,{children:"Always clean up webhook listeners:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public override void Unload()\r\n{\r\n    _listener?.Stop();\r\n    _listener?.Close();\r\n    _processingLock?.Dispose();\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Learn about performance limits"}),": ",(0,s.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/core-concepts/rate-limits",children:"Rate Limits"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"See webhook examples"}),": ",(0,s.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/guides/webhooks-guide",children:"Guides & Tutorials"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explore API integration"}),": ",(0,s.jsx)(n.a,{href:"/LogiDoc/docs/actions-sdk/api-reference",children:"API Reference"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Webhooks enable powerful real-time integrations with external services."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var o=r(6540);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);