"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[8896],{7591:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"lightsync-sdk/java/getting-started","title":"Getting Started with Java","description":"Learn how to integrate LightSync SDK with Java applications","source":"@site/docs/lightsync-sdk/java/getting-started.md","sourceDirName":"lightsync-sdk/java","slug":"/lightsync-sdk/java/getting-started","permalink":"/LogiDoc/docs/lightsync-sdk/java/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started with Java","sidebar_label":"Java Getting Started","description":"Learn how to integrate LightSync SDK with Java applications"}}');var t=r(4848),a=r(8453);const l={id:"getting-started",title:"Getting Started with Java",sidebar_label:"Java Getting Started",description:"Learn how to integrate LightSync SDK with Java applications"},s="Getting Started with Java",o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Step 1: Add Dependencies",id:"step-1-add-dependencies",level:3},{value:"Step 2: Create the SDK Interface",id:"step-2-create-the-sdk-interface",level:3},{value:"Step 3: Initialize the SDK",id:"step-3-initialize-the-sdk",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Setting LED Colors",id:"setting-led-colors",level:3},{value:"Creating Breathing Effects",id:"creating-breathing-effects",level:3},{value:"Zone Control",id:"zone-control",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Device Detection",id:"device-detection",level:3},{value:"Color Management",id:"color-management",level:3},{value:"Animation System",id:"animation-system",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started-with-java",children:"Getting Started with Java"})}),"\n",(0,t.jsx)(n.p,{children:"This guide will walk you through setting up the LightSync SDK in your Java application."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Java Development Kit (JDK) 8 or later"}),"\n",(0,t.jsx)(n.li,{children:"IDE: IntelliJ IDEA, Eclipse, or VS Code"}),"\n",(0,t.jsx)(n.li,{children:"Logitech Gaming Software (LGS) or G HUB installed"}),"\n",(0,t.jsx)(n.li,{children:"Compatible Logitech gaming device"}),"\n",(0,t.jsx)(n.li,{children:"JNA (Java Native Access) library"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-add-dependencies",children:"Step 1: Add Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"Add JNA to your project dependencies:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Maven:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\r\n    <groupId>net.java.dev.jna</groupId>\r\n    <artifactId>jna</artifactId>\r\n    <version>5.12.1</version>\r\n</dependency>\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gradle:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"implementation 'net.java.dev.jna:jna:5.12.1'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-create-the-sdk-interface",children:"Step 2: Create the SDK Interface"}),"\n",(0,t.jsx)(n.p,{children:"Create a Java interface to map the native SDK functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import com.sun.jna.Library;\r\nimport com.sun.jna.Native;\r\nimport com.sun.jna.Platform;\r\n\r\npublic interface LogitechGSDK extends Library {\r\n    LogitechGSDK INSTANCE = Native.load(\r\n        Platform.isWindows() ? "LogitechGSDK" : "logitechgsdk",\r\n        LogitechGSDK.class\r\n    );\r\n    \r\n    // SDK Functions\r\n    boolean LogiLedInit();\r\n    void LogiLedShutdown();\r\n    boolean LogiLedSetLighting(int redPercentage, int greenPercentage, int bluePercentage);\r\n    boolean LogiLedSetLightingForKeyWithKeyName(int keyName, int red, int green, int blue);\r\n    boolean LogiLedSetLightingForTargetZone(int deviceType, int zone, int red, int green, int blue);\r\n    boolean LogiLedSetLightingForTargetZone2(int deviceType, int zone, int red1, int green1, int blue1, int red2, int green2, int blue2, int duration);\r\n    \r\n    // Constants\r\n    int LOGI_DEVICETYPE_ALL = 0;\r\n    int LOGI_DEVICETYPE_MONOCHROME = 1;\r\n    int LOGI_DEVICETYPE_RGB = 2;\r\n    int LOGI_DEVICETYPE_PERKEY_RGB = 3;\r\n    \r\n    // Key constants\r\n    int LOGI_LED_A = 0x04;\r\n    int LOGI_LED_S = 0x16;\r\n    int LOGI_LED_D = 0x07;\r\n    int LOGI_LED_W = 0x1A;\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-initialize-the-sdk",children:"Step 3: Initialize the SDK"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import com.sun.jna.Library;\r\n\r\npublic class LightSyncExample {\r\n    public static void main(String[] args) {\r\n        // Initialize the SDK\r\n        boolean initialized = LogitechGSDK.INSTANCE.LogiLedInit();\r\n        \r\n        if (!initialized) {\r\n            System.out.println("Failed to initialize LightSync SDK");\r\n            return;\r\n        }\r\n        \r\n        System.out.println("LightSync SDK initialized successfully");\r\n        \r\n        try {\r\n            // Your lighting code here\r\n            setBasicLighting();\r\n        } finally {\r\n            // Cleanup\r\n            LogitechGSDK.INSTANCE.LogiLedShutdown();\r\n            System.out.println("SDK shutdown complete");\r\n        }\r\n    }\r\n    \r\n    private static void setBasicLighting() {\r\n        // Set all LEDs to blue\r\n        LogitechGSDK.INSTANCE.LogiLedSetLighting(0, 0, 100);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"setting-led-colors",children:"Setting LED Colors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Set all LEDs to red\r\nLogitechGSDK.INSTANCE.LogiLedSetLighting(100, 0, 0);\r\n\r\n// Set specific key to blue\r\nLogitechGSDK.INSTANCE.LogiLedSetLightingForKeyWithKeyName(\r\n    LogitechGSDK.LOGI_LED_A, \r\n    0, 0, 255\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"creating-breathing-effects",children:"Creating Breathing Effects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create a breathing effect between red and blue\r\nLogitechGSDK.INSTANCE.LogiLedSetLightingForTargetZone2(\r\n    LogitechGSDK.LOGI_DEVICETYPE_ALL,\r\n    0, // Zone index\r\n    255, 0, 0, // Red color\r\n    0, 0, 255, // Blue color\r\n    2000 // Duration in milliseconds\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"zone-control",children:"Zone Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Control specific zones on RGB devices\r\nLogitechGSDK.INSTANCE.LogiLedSetLightingForTargetZone(\r\n    LogitechGSDK.LOGI_DEVICETYPE_RGB,\r\n    0, // Zone 0\r\n    255, 0, 0 // Red color\r\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"device-detection",children:"Device Detection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class DeviceManager {\r\n    public static boolean isDeviceConnected() {\r\n        // Try to set lighting to test if device is connected\r\n        boolean result = LogitechGSDK.INSTANCE.LogiLedSetLighting(0, 0, 0);\r\n        return result;\r\n    }\r\n    \r\n    public static void testAllKeys() {\r\n        int[] keys = {\r\n            LogitechGSDK.LOGI_LED_A,\r\n            LogitechGSDK.LOGI_LED_S,\r\n            LogitechGSDK.LOGI_LED_D,\r\n            LogitechGSDK.LOGI_LED_W\r\n        };\r\n        \r\n        for (int key : keys) {\r\n            LogitechGSDK.INSTANCE.LogiLedSetLightingForKeyWithKeyName(key, 255, 255, 255);\r\n            try {\r\n                Thread.sleep(500);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"color-management",children:"Color Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class ColorUtils {\r\n    public static class RGB {\r\n        public int red, green, blue;\r\n        \r\n        public RGB(int red, int green, int blue) {\r\n            this.red = red;\r\n            this.green = green;\r\n            this.blue = blue;\r\n        }\r\n    }\r\n    \r\n    public static RGB hsvToRgb(float hue, float saturation, float value) {\r\n        // HSV to RGB conversion\r\n        int h = (int) (hue * 6);\r\n        float f = hue * 6 - h;\r\n        float p = value * (1 - saturation);\r\n        float q = value * (1 - f * saturation);\r\n        float t = value * (1 - (1 - f) * saturation);\r\n        \r\n        switch (h) {\r\n            case 0: return new RGB((int)(value * 255), (int)(t * 255), (int)(p * 255));\r\n            case 1: return new RGB((int)(q * 255), (int)(value * 255), (int)(p * 255));\r\n            case 2: return new RGB((int)(p * 255), (int)(value * 255), (int)(t * 255));\r\n            case 3: return new RGB((int)(p * 255), (int)(q * 255), (int)(value * 255));\r\n            case 4: return new RGB((int)(t * 255), (int)(p * 255), (int)(value * 255));\r\n            case 5: return new RGB((int)(value * 255), (int)(p * 255), (int)(q * 255));\r\n            default: return new RGB(0, 0, 0);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"animation-system",children:"Animation System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class LightAnimation {\r\n    private volatile boolean running = false;\r\n    private Thread animationThread;\r\n    \r\n    public void startRainbowEffect() {\r\n        if (running) return;\r\n        \r\n        running = true;\r\n        animationThread = new Thread(() -> {\r\n            float hue = 0.0f;\r\n            while (running) {\r\n                RGB color = ColorUtils.hsvToRgb(hue, 1.0f, 1.0f);\r\n                LogitechGSDK.INSTANCE.LogiLedSetLighting(\r\n                    color.red, color.green, color.blue\r\n                );\r\n                \r\n                hue += 0.01f;\r\n                if (hue > 1.0f) hue = 0.0f;\r\n                \r\n                try {\r\n                    Thread.sleep(50);\r\n                } catch (InterruptedException e) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        animationThread.start();\r\n    }\r\n    \r\n    public void stop() {\r\n        running = false;\r\n        if (animationThread != null) {\r\n            animationThread.interrupt();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class LightSyncManager {\r\n    private static final LogitechGSDK sdk = LogitechGSDK.INSTANCE;\r\n    \r\n    public static boolean safeSetLighting(int red, int green, int blue) {\r\n        try {\r\n            return sdk.LogiLedSetLighting(red, green, blue);\r\n        } catch (Exception e) {\r\n            System.err.println("Error setting lighting: " + e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    public static boolean initializeSDK() {\r\n        try {\r\n            return sdk.LogiLedInit();\r\n        } catch (Exception e) {\r\n            System.err.println("Failed to initialize SDK: " + e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import com.sun.jna.Library;\r\nimport com.sun.jna.Native;\r\n\r\npublic class LightSyncDemo {\r\n    public static void main(String[] args) {\r\n        System.out.println("Starting LightSync Java Demo");\r\n        \r\n        // Initialize SDK\r\n        if (!LogitechGSDK.INSTANCE.LogiLedInit()) {\r\n            System.out.println("Failed to initialize SDK");\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Basic lighting demo\r\n            demoBasicLighting();\r\n            Thread.sleep(2000);\r\n            \r\n            // Key-specific lighting\r\n            demoKeyLighting();\r\n            Thread.sleep(2000);\r\n            \r\n            // Breathing effect\r\n            demoBreathingEffect();\r\n            Thread.sleep(3000);\r\n            \r\n            // Rainbow effect\r\n            demoRainbowEffect();\r\n            Thread.sleep(5000);\r\n            \r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            // Cleanup\r\n            LogitechGSDK.INSTANCE.LogiLedShutdown();\r\n            System.out.println("Demo complete");\r\n        }\r\n    }\r\n    \r\n    private static void demoBasicLighting() {\r\n        System.out.println("Setting basic lighting...");\r\n        LogitechGSDK.INSTANCE.LogiLedSetLighting(0, 0, 255); // Blue\r\n    }\r\n    \r\n    private static void demoKeyLighting() {\r\n        System.out.println("Setting key-specific lighting...");\r\n        int[] keys = {LogitechGSDK.LOGI_LED_W, LogitechGSDK.LOGI_LED_A, \r\n                     LogitechGSDK.LOGI_LED_S, LogitechGSDK.LOGI_LED_D};\r\n        int[][] colors = {{255,0,0}, {0,255,0}, {0,0,255}, {255,255,0}};\r\n        \r\n        for (int i = 0; i < keys.length; i++) {\r\n            LogitechGSDK.INSTANCE.LogiLedSetLightingForKeyWithKeyName(\r\n                keys[i], colors[i][0], colors[i][1], colors[i][2]\r\n            );\r\n        }\r\n    }\r\n    \r\n    private static void demoBreathingEffect() {\r\n        System.out.println("Creating breathing effect...");\r\n        LogitechGSDK.INSTANCE.LogiLedSetLightingForTargetZone2(\r\n            LogitechGSDK.LOGI_DEVICETYPE_ALL, 0,\r\n            255, 0, 0, 0, 0, 255, 2000\r\n        );\r\n    }\r\n    \r\n    private static void demoRainbowEffect() {\r\n        System.out.println("Starting rainbow effect...");\r\n        LightAnimation animation = new LightAnimation();\r\n        animation.startRainbowEffect();\r\n        \r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            animation.stop();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Always initialize and shutdown properly"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use try-finally blocks for cleanup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Handle exceptions gracefully"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Check return values from SDK calls"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use appropriate color values (0-255)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Implement proper threading for animations"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explore the ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/java/api-reference",children:"API Reference"})]}),"\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/java/advanced-effects",children:"Advanced Effects"})]}),"\n",(0,t.jsxs)(n.li,{children:["Check out ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/troubleshooting",children:"Troubleshooting"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"If you encounter issues:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure LGS/G HUB is running"}),"\n",(0,t.jsx)(n.li,{children:"Check device compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Verify JNA is properly configured"}),"\n",(0,t.jsx)(n.li,{children:"Review error codes in the API reference"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var i=r(6540);const t={},a=i.createContext(t);function l(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);