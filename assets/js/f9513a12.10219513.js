"use strict";(self.webpackChunktemp_logi_docs=self.webpackChunktemp_logi_docs||[]).push([[3943],{318:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"lightsync-sdk/csharp/getting-started","title":"Getting Started with C#","description":"Learn how to integrate LightSync SDK with C# applications","source":"@site/docs/lightsync-sdk/csharp/getting-started.md","sourceDirName":"lightsync-sdk/csharp","slug":"/lightsync-sdk/csharp/getting-started","permalink":"/LogiDoc/docs/lightsync-sdk/csharp/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started with C#","sidebar_label":"C# Getting Started","description":"Learn how to integrate LightSync SDK with C# applications"}}');var t=i(4848),l=i(8453);const s={id:"getting-started",title:"Getting Started with C#",sidebar_label:"C# Getting Started",description:"Learn how to integrate LightSync SDK with C# applications"},a="Getting Started with C#",o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Step 1: Download the SDK",id:"step-1-download-the-sdk",level:3},{value:"Step 2: Add References",id:"step-2-add-references",level:3},{value:"Step 3: Initialize the SDK",id:"step-3-initialize-the-sdk",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Setting LED Colors",id:"setting-led-colors",level:3},{value:"Creating Breathing Effects",id:"creating-breathing-effects",level:3},{value:"Audio Integration",id:"audio-integration",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Device Enumeration",id:"device-enumeration",level:3},{value:"Zone Control",id:"zone-control",level:3},{value:"Profile Management",id:"profile-management",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Complete Application",id:"example-complete-application",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started-with-c",children:"Getting Started with C#"})}),"\n",(0,t.jsx)(n.p,{children:"This guide will walk you through setting up the LightSync SDK in your C# application."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Visual Studio 2019 or later (or Visual Studio Code)"}),"\n",(0,t.jsx)(n.li,{children:".NET Framework 4.7.2 or later (or .NET Core 3.1+)"}),"\n",(0,t.jsx)(n.li,{children:"Logitech Gaming Software (LGS) or G HUB installed"}),"\n",(0,t.jsx)(n.li,{children:"Compatible Logitech gaming device"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-download-the-sdk",children:"Step 1: Download the SDK"}),"\n",(0,t.jsx)(n.p,{children:"Download the LightSync SDK from the Logitech developer portal or include the DLL in your project."}),"\n",(0,t.jsx)(n.h3,{id:"step-2-add-references",children:"Step 2: Add References"}),"\n",(0,t.jsx)(n.p,{children:"Add the following references to your C# project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"using LogitechGSDK;\r\nusing LogitechGSDK.Lighting;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-initialize-the-sdk",children:"Step 3: Initialize the SDK"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing LogitechGSDK;\r\nusing LogitechGSDK.Lighting;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        // Initialize the SDK\r\n        bool initialized = LogitechGSDK.LogiLedInit();\r\n        \r\n        if (!initialized)\r\n        {\r\n            Console.WriteLine("Failed to initialize LightSync SDK");\r\n            return;\r\n        }\r\n        \r\n        Console.WriteLine("LightSync SDK initialized successfully");\r\n        \r\n        // Your lighting code here\r\n        \r\n        // Cleanup\r\n        LogitechGSDK.LogiLedShutdown();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"setting-led-colors",children:"Setting LED Colors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Set all LEDs to red\r\nLogitechGSDK.LogiLedSetLighting(100, 0, 0);\r\n\r\n// Set specific LED zone to blue\r\nLogitechGSDK.LogiLedSetLightingForKeyWithKeyName(\r\n    LogitechGSDK.LOGI_LED.LOGI_LED_A, \r\n    0, 0, 100\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"creating-breathing-effects",children:"Creating Breathing Effects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Create a breathing effect on all LEDs\r\nLogitechGSDK.LogiLedSetLightingForTargetZone(\r\n    LogitechGSDK.LOGI_DEVICETYPE.LOGI_DEVICETYPE_ALL,\r\n    0, // Zone index\r\n    100, 0, 0, // Red color\r\n    0, 0, 100, // Blue color\r\n    1000 // Duration in milliseconds\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audio-integration",children:"Audio Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Enable audio visualization\r\nLogitechGSDK.LogiLedSetLightingFromBitmap(bitmapData);\r\n\r\n// Or use the audio callback\r\nLogitechGSDK.LogiLedSetCallback(callbackFunction);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"device-enumeration",children:"Device Enumeration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Get connected devices\r\nvar devices = LogitechGSDK.LogiGetConnectedDevices();\r\nforeach (var device in devices)\r\n{\r\n    Console.WriteLine($"Device: {device.Name}, Type: {device.Type}");\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"zone-control",children:"Zone Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Control specific zones on a device\r\nLogitechGSDK.LogiLedSetLightingForTargetZone(\r\n    LogitechGSDK.LOGI_DEVICETYPE.LOGI_DEVICETYPE_KEYBOARD,\r\n    0, // Zone 0\r\n    255, 0, 0 // Red color\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"profile-management",children:"Profile Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Save current lighting as a profile\r\nLogitechGSDK.LogiLedSaveCurrentLighting();\r\n\r\n// Load a saved profile\r\nLogitechGSDK.LogiLedRestoreLighting();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"Always check return values and handle errors appropriately:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'bool result = LogitechGSDK.LogiLedSetLighting(100, 0, 0);\r\nif (!result)\r\n{\r\n    Console.WriteLine("Failed to set lighting");\r\n    // Handle error\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Always initialize and shutdown properly"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Check device compatibility before setting effects"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use appropriate color values (0-255)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Handle errors gracefully"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Clean up resources when done"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-complete-application",children:"Example: Complete Application"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing System.Threading;\r\nusing LogitechGSDK;\r\nusing LogitechGSDK.Lighting;\r\n\r\nclass LightSyncExample\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine("Starting LightSync C# Example");\r\n        \r\n        // Initialize SDK\r\n        if (!LogitechGSDK.LogiLedInit())\r\n        {\r\n            Console.WriteLine("Failed to initialize SDK");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // Set initial lighting\r\n            LogitechGSDK.LogiLedSetLighting(0, 0, 100); // Blue\r\n            Thread.Sleep(1000);\r\n            \r\n            // Create breathing effect\r\n            LogitechGSDK.LogiLedSetLightingForTargetZone(\r\n                LOGI_DEVICETYPE.LOGI_DEVICETYPE_ALL,\r\n                0, 100, 0, 0, 0, 0, 100, 2000\r\n            );\r\n            \r\n            Thread.Sleep(3000);\r\n            \r\n            // Set individual keys\r\n            LogitechGSDK.LogiLedSetLightingForKeyWithKeyName(\r\n                LOGI_LED.LOGI_LED_W, 255, 255, 0\r\n            );\r\n            LogitechGSDK.LogiLedSetLightingForKeyWithKeyName(\r\n                LOGI_LED.LOGI_LED_A, 255, 0, 255\r\n            );\r\n            LogitechGSDK.LogiLedSetLightingForKeyWithKeyName(\r\n                LOGI_LED.LOGI_LED_S, 0, 255, 255\r\n            );\r\n            LogitechGSDK.LogiLedSetLightingForKeyWithKeyName(\r\n                LOGI_LED.LOGI_LED_D, 255, 255, 255\r\n            );\r\n            \r\n            Thread.Sleep(2000);\r\n        }\r\n        finally\r\n        {\r\n            // Cleanup\r\n            LogitechGSDK.LogiLedShutdown();\r\n            Console.WriteLine("SDK shutdown complete");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explore the ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/csharp/api-reference",children:"API Reference"})]}),"\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/csharp/advanced-effects",children:"Advanced Effects"})]}),"\n",(0,t.jsxs)(n.li,{children:["Check out ",(0,t.jsx)(n.a,{href:"/docs/lightsync-sdk/troubleshooting",children:"Troubleshooting"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"If you encounter issues:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure LGS/G HUB is running"}),"\n",(0,t.jsx)(n.li,{children:"Check device compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Verify SDK initialization"}),"\n",(0,t.jsx)(n.li,{children:"Review error codes in the API reference"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);